package o;

import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.SecureRandom;

public final class Utils
{
  private static SecureRandom random = new SecureRandom();
  
  public static byte[] decode(String paramString)
  {
    try
    {
      paramString = Method.decode(JSONArray.getContext().getResources().getAssets().open(paramString));
      return paramString;
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    return new byte[0];
  }
  
  public static long getBytes()
  {
    return random.nextLong();
  }
  
  public static InputStream getInputStream(String paramString)
  {
    try
    {
      paramString = JSONArray.getContext().getResources().getAssets().open(paramString);
      return paramString;
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static byte[] init()
  {
    byte[] arrayOfByte = new byte[random.nextInt(15) + 1];
    random.nextBytes(arrayOfByte);
    return arrayOfByte;
  }
  
  public static int[] initSign()
  {
    int[] arrayOfInt = new int[3];
    int i = 0;
    while (i < 3)
    {
      arrayOfInt[i] = random.nextInt();
      i += 1;
    }
    return arrayOfInt;
  }
  
  public static void moveFile(File paramFile1, File paramFile2)
  {
    paramFile1 = new FileInputStream(paramFile1);
    paramFile2 = new FileOutputStream(paramFile2);
    byte[] arrayOfByte = new byte['?'];
    for (;;)
    {
      int i = paramFile1.read(arrayOfByte);
      if (i <= 0) {
        break;
      }
      paramFile2.write(arrayOfByte, 0, i);
    }
    paramFile1.close();
    paramFile2.close();
  }
  
  public static void sleep(int paramInt)
  {
    long l = paramInt;
    try
    {
      Thread.sleep(l);
      return;
    }
    catch (InterruptedException localInterruptedException) {}
  }
  
  public static byte[] toByteArray(byte[]... paramVarArgs)
  {
    int j = 0;
    int i = 0;
    while (i < paramVarArgs.length)
    {
      j += paramVarArgs[i].length;
      i += 1;
    }
    byte[] arrayOfByte = new byte[j];
    j = 0;
    i = 0;
    while (i < paramVarArgs.length)
    {
      System.arraycopy(paramVarArgs[i], 0, arrayOfByte, j, paramVarArgs[i].length);
      j += paramVarArgs[i].length;
      i += 1;
    }
    return arrayOfByte;
  }
}
