package o;

import java.util.ArrayList;
import java.util.List;

public abstract class Attachment<U>
{
  private List<?<U>> data = new ArrayList();
  java.lang.Object id = new java.lang.Object();
  boolean size;
  
  public Attachment() {}
  
  public final boolean add(Object paramObject)
  {
    try
    {
      if (data.contains(paramObject)) {
        return false;
      }
      if (data.isEmpty()) {
        init();
      }
      data.add(paramObject);
      return true;
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
  }
  
  public final void delete()
  {
    java.lang.Object localObject = id;
    try
    {
      if (size)
      {
        size = false;
        init();
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  protected abstract void init();
  
  protected abstract void onCreate();
  
  public final void save()
  {
    java.lang.Object localObject = id;
    try
    {
      if (!size)
      {
        size = true;
        onCreate();
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public int update(java.lang.Object paramObject)
  {
    java.lang.Object[] arrayOfObject;
    try
    {
      arrayOfObject = data.toArray();
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
    int j = 0;
    int k = arrayOfObject.length;
    int i = 0;
    while (i < k)
    {
      j |= ((Object)arrayOfObject[i]).execute(paramObject);
      i += 1;
    }
    return j;
  }
  
  public final void update(Object paramObject)
  {
    try
    {
      if (data.isEmpty()) {
        return;
      }
      data.remove(paramObject);
      if (data.isEmpty()) {
        onCreate();
      }
      return;
    }
    catch (Throwable paramObject)
    {
      throw paramObject;
    }
  }
}
