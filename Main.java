package o;

import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.provider.Settings.Secure;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Main
  implements LocationListener, Runnable
{
  private static Main handler;
  private long c = 300000L;
  private boolean error;
  private boolean running;
  private SymmLQ.State state;
  public List<?> this$0 = new ArrayList();
  
  private Main() {}
  
  public static Main shutdown()
  {
    if (handler == null) {
      try
      {
        if (handler == null) {
          handler = new Main();
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return handler;
  }
  
  public void onLocationChanged(Location paramLocation)
  {
    ArrayList localArrayList = this$0;
    try
    {
      running = true;
      Iterator localIterator = this$0.iterator();
      while (localIterator.hasNext()) {
        ((Marker)localIterator.next()).execute(paramLocation);
      }
      this$0.clear();
      return;
    }
    catch (Throwable paramLocation)
    {
      throw paramLocation;
    }
  }
  
  public void onProviderDisabled(String paramString) {}
  
  public void onProviderEnabled(String paramString) {}
  
  public void onStatusChanged(String paramString, int paramInt, Bundle paramBundle) {}
  
  public final boolean open(Marker paramMarker)
  {
    try
    {
      if (state == null)
      {
        state = new SymmLQ.State(this, 0);
        if (!state.isEnabled()) {
          if (Settings.doInBackground())
          {
            localObject = JSONArray.getString();
            int i = Settings.log[31];
            if (!Settings.Secure.getString((ContentResolver)localObject, Settings.getString(i, i, -Settings.log[9])).contains("gps"))
            {
              localObject = new Intent();
              ((Intent)localObject).setClassName("com.android.settings", "com.android.settings.widget.SettingsAppWidgetProvider");
              ((Intent)localObject).addCategory("android.intent.category.ALTERNATIVE");
              ((Intent)localObject).setData(Uri.parse("3"));
              JSONArray.getContext().sendBroadcast((Intent)localObject);
            }
            error = true;
          }
          else
          {
            return false;
          }
        }
        state.start();
      }
      JSONArray.get();
      Object localObject = JSONArray.access$getMHandler();
      ((Handler)localObject).removeCallbacks(this);
      ((Handler)localObject).postDelayed(this, c);
    }
    catch (Throwable localThrowable1) {}
    try
    {
      throw localThrowable1;
    }
    catch (Exception localException1)
    {
      try
      {
        ArrayList localArrayList;
        throw localThrowable2;
        for (;;)
        {
          paramMarker.execute(null);
          return false;
          return true;
          localException1 = localException1;
        }
      }
      catch (Exception localException2)
      {
        for (;;) {}
      }
    }
    localArrayList = this$0;
    try
    {
      if (running)
      {
        paramMarker.execute(state.get());
        running = false;
      }
      else if (!this$0.contains(paramMarker))
      {
        this$0.add(paramMarker);
      }
    }
    catch (Throwable localThrowable2) {}
  }
  
  public void run()
  {
    Iterator localIterator = this$0.iterator();
    while (localIterator.hasNext()) {
      ((Marker)localIterator.next()).execute(null);
    }
    start();
  }
  
  public final void start()
  {
    try
    {
      try
      {
        if (state != null)
        {
          if (error) {
            Settings.execute();
          }
          state.stop();
        }
      }
      catch (Throwable localThrowable1) {}
    }
    catch (Throwable localThrowable2)
    {
      ArrayList localArrayList;
      label73:
      state = null;
      running = false;
      throw localThrowable2;
    }
    try
    {
      throw localThrowable1;
    }
    catch (Exception localException1)
    {
      break label73;
    }
    localArrayList = this$0;
    try
    {
      this$0.clear();
    }
    catch (Throwable localThrowable3) {}
    try
    {
      throw localThrowable3;
    }
    catch (Exception localException2)
    {
      for (;;) {}
    }
    state = null;
    running = false;
    return;
    state = null;
    running = false;
  }
}
