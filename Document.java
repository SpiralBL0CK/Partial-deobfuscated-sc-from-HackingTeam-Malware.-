package o;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

public abstract class Document
  extends HttpConnection
{
  public String address;
  int id;
  private ConnectionsManager.2 instance;
  private boolean state = false;
  protected Track this$0;
  
  public Document() {}
  
  public final boolean add(Track paramTrack)
  {
    this$0 = paramTrack;
    boolean bool = execute(paramTrack);
    id = size;
    return bool;
  }
  
  final void close()
  {
    if ((state) && (instance != null))
    {
      ConnectionsManager.2.cancel();
      JSONArray.getContext().unregisterReceiver(instance);
      instance = null;
    }
  }
  
  protected abstract boolean execute(Track paramTrack);
  
  public final boolean get()
  {
    return this$0.first;
  }
  
  public final int getId()
  {
    return this$0.type;
  }
  
  public final String getName()
  {
    return this$0.name;
  }
  
  protected final void init()
  {
    try
    {
      if (state) {
        return;
      }
      int i = this$0.color;
      int j = this$0.file;
      if (j != -1)
      {
        JSONArray.get();
        JSONArray.remove(j, this);
      }
      if (i > 0)
      {
        instance = new ConnectionsManager.2(this);
        JSONArray.getContext().registerReceiver(instance, new IntentFilter("BE." + this$0.type));
        Object localObject = instance;
        Context localContext = JSONArray.getContext();
        AlarmManager localAlarmManager = (AlarmManager)localContext.getSystemService("alarm");
        localObject = PendingIntent.getBroadcast(localContext, 0, new Intent("BE." + this$0.this$0.type), 0);
        localAlarmManager.setRepeating(0, System.currentTimeMillis() + i * 1000, i * 1000, (PendingIntent)localObject);
      }
      state = true;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  protected final void parse()
  {
    try
    {
      if (state)
      {
        close();
        state = false;
        int i = this$0.count;
        if (i != -1)
        {
          JSONArray.get();
          JSONArray.remove(i, this);
        }
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder("Event (").append(this$0.type).append(") <").append(this$0.name.toUpperCase()).append("> : ").append(this$0.title).append(" ");
    String str;
    if (this$0.first) {
      str = "ENABLED";
    } else {
      str = "DISABLED";
    }
    return str;
  }
}
