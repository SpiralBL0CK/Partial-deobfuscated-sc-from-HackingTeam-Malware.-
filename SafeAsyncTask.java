package o;

public final class SafeAsyncTask
  extends Document
  implements Object
{
  private static final byte[] handler = { 74, 67, -46, 58, -2, 2, 8, -1, -10, 0, 18, 0, 12, -18, 12, -10, 0, 18, 0 };
  private int count;
  private float last;
  private GpsStatus mThread;
  private float value;
  
  public SafeAsyncTask() {}
  
  private static String parse(int paramInt1, int paramInt2, int paramInt3)
  {
    byte[] arrayOfByte1 = handler;
    int i = paramInt2 * 4 + 108;
    paramInt1 += 8;
    int j = 0;
    int m = 0;
    paramInt3 = 12 - (paramInt3 << 3);
    byte[] arrayOfByte2 = new byte[paramInt1];
    int k = paramInt1 - 1;
    paramInt2 = i;
    paramInt1 = paramInt3;
    if (arrayOfByte1 == null)
    {
      paramInt2 = k;
      paramInt1 = paramInt3;
      j = i;
      paramInt3 = m;
      i = paramInt2;
    }
    for (;;)
    {
      paramInt2 = j - i + 1;
      paramInt1 += 1;
      j = paramInt3;
      arrayOfByte2[j] = ((byte)paramInt2);
      if (j == k) {
        return new String(arrayOfByte2, 0);
      }
      paramInt3 = j + 1;
      i = arrayOfByte1[paramInt1];
      j = paramInt2;
    }
  }
  
  public final void doInBackground()
  {
    mThread = new GpsStatus(this, last, value, count);
    mThread.start();
  }
  
  public final void execute()
  {
    mThread.stop();
    GpsStatus localGpsStatus = mThread;
    try
    {
      localGpsStatus.join();
      mThread = null;
      parse();
      return;
    }
    catch (InterruptedException localInterruptedException)
    {
      for (;;) {}
    }
  }
  
  public final boolean execute(Track paramTrack)
  {
    try
    {
      int i = paramTrack.getInt("distance");
      count = i;
      i = handler[9];
      double d = paramTrack.put(parse(i, i, i));
      last = ((float)d);
      i = -handler[7];
      int j = handler[9];
      int k = -handler[7];
      d = paramTrack.put(parse(i, j, k));
      value = ((float)d);
    }
    catch (JSONException paramTrack)
    {
      for (;;) {}
    }
    return false;
    return true;
  }
  
  public final void read() {}
}
