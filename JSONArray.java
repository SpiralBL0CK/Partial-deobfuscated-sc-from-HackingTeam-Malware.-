package o;

import android.content.ContentResolver;
import android.content.Context;
import android.content.ContextWrapper;
import android.os.Handler;
import android.os.PowerManager;
import android.os.PowerManager.WakeLock;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

public class JSONArray
{
  private static HashMap<String, ?> attributes;
  private static Object[] buffer = new Object[2];
  public static boolean c = false;
  public static boolean compressor;
  private static Context context;
  private static boolean[] count;
  private static ArrayList<?>[] data = new ArrayList[2];
  private static boolean end;
  public static boolean id;
  private static HashMap<java.lang.Integer, Con> items;
  private static volatile JSONArray mArray;
  private static VideoPlayer mCurrentTime;
  private static Handler mHandler = new Handler();
  private static PowerManager.WakeLock mWakeLock;
  public static int movementMethod;
  private static Object next = new Object();
  private static boolean result = false;
  private static boolean root;
  public static boolean status;
  private static HashMap<java.lang.Integer, ?> this$0;
  private static XmlReader year;
  private boolean sent;
  
  static
  {
    count = new boolean[6];
    end = false;
    root = false;
  }
  
  private JSONArray()
  {
    attributes = new HashMap();
    this$0 = new HashMap();
    items = new HashMap();
    int i = 0;
    while (i < 2)
    {
      buffer[i] = new Object();
      data[i] = new ArrayList();
      i += 1;
    }
  }
  
  public static Handler access$getMHandler()
  {
    return mHandler;
  }
  
  public static boolean access$getRoot()
  {
    return root;
  }
  
  public static void flush()
  {
    Object localObject = next;
    try
    {
      result = true;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static JSONArray get()
  {
    if (mArray == null) {
      try
      {
        if (mArray == null) {
          mArray = new JSONArray();
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return mArray;
  }
  
  public static Track get(int paramInt)
  {
    if (!this$0.containsKey(java.lang.Integer.valueOf(paramInt))) {
      throw new HashtableByteArrayEntry(paramInt + " not found");
    }
    Track localTrack = (Track)this$0.get(java.lang.Integer.valueOf(paramInt));
    if (localTrack == null) {
      throw new HashtableByteArrayEntry(paramInt + " is null");
    }
    return localTrack;
  }
  
  public static HashMap getAttributes()
  {
    return attributes;
  }
  
  public static Context getContext()
  {
    return context;
  }
  
  public static int getInt()
  {
    return this$0.size();
  }
  
  public static ContentResolver getString()
  {
    return context.getContentResolver();
  }
  
  public static VideoPlayer getTime()
  {
    return mCurrentTime;
  }
  
  public static HashMap init()
  {
    return this$0;
  }
  
  public static void init(Context paramContext)
  {
    context = paramContext;
    mWakeLock = ((PowerManager)paramContext.getSystemService("power")).newWakeLock(1, "T");
  }
  
  public static void init(VideoPlayer paramVideoPlayer)
  {
    Context localContext = paramVideoPlayer.getApplicationContext();
    context = localContext;
    mWakeLock = ((PowerManager)localContext.getSystemService("power")).newWakeLock(1, "T");
    mCurrentTime = paramVideoPlayer;
  }
  
  private static boolean insert()
  {
    Object localObject = next;
    try
    {
      boolean bool = result;
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static boolean length()
  {
    return end;
  }
  
  public static ScheduledExecutorService newScheduledPool()
  {
    return Executors.newScheduledThreadPool(1);
  }
  
  public static void next()
  {
    int i = 0;
    for (;;)
    {
      if (i < 2)
      {
        ArrayList localArrayList = data[i];
        Object localObject = buffer[i];
        try
        {
          localArrayList.clear();
        }
        catch (Throwable localThrowable1)
        {
          throw localThrowable1;
        }
      }
      try
      {
        try
        {
          localThrowable1.notifyAll();
        }
        catch (Throwable localThrowable2)
        {
          throw localThrowable2;
        }
        i += 1;
        continue;
        return;
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
    }
  }
  
  public static XmlReader opt()
  {
    return year;
  }
  
  public static boolean process()
  {
    Object localObject = next;
    for (;;)
    {
      try
      {
        if ((insert()) && (count[5] != 0))
        {
          bool = true;
          return bool;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      boolean bool = false;
    }
  }
  
  /* Error */
  public static void put(int paramInt)
  {
    // Byte code:
    //   0: ldc 99
    //   2: monitorenter
    //   3: getstatic 54	o/JSONArray:next	Ljava/lang/Object;
    //   6: astore_1
    //   7: aload_1
    //   8: monitorenter
    //   9: getstatic 58	o/JSONArray:count	[Z
    //   12: iload_0
    //   13: iconst_1
    //   14: bastore
    //   15: aload_1
    //   16: monitorexit
    //   17: ldc 99
    //   19: monitorexit
    //   20: return
    //   21: astore_2
    //   22: aload_1
    //   23: monitorexit
    //   24: aload_2
    //   25: athrow
    //   26: astore_1
    //   27: ldc 99
    //   29: monitorexit
    //   30: aload_1
    //   31: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	32	0	paramInt	int
    //   6	17	1	localObject	Object
    //   26	5	1	localThrowable1	Throwable
    //   21	4	2	localThrowable2	Throwable
    // Exception table:
    //   from	to	target	type
    //   9	17	21	java/lang/Throwable
    //   22	24	21	java/lang/Throwable
    //   3	9	26	java/lang/Throwable
    //   17	20	26	java/lang/Throwable
    //   24	26	26	java/lang/Throwable
  }
  
  public static void put(Integer paramInteger)
  {
    attributes.containsKey(name);
    attributes.put(name, paramInteger);
  }
  
  public static void put(Range paramRange)
  {
    items.put(java.lang.Integer.valueOf(name), paramRange);
  }
  
  public static void put(boolean paramBoolean)
  {
    root = paramBoolean;
  }
  
  public static boolean put()
  {
    Object localObject = next;
    for (;;)
    {
      try
      {
        if ((insert()) && (count[1] != 0))
        {
          bool = true;
          return bool;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      boolean bool = false;
    }
  }
  
  public static Range remove(int paramInt)
  {
    if (!items.containsKey(java.lang.Integer.valueOf(paramInt))) {
      throw new HashtableByteArrayEntry(paramInt + " not found");
    }
    Range localRange = (Range)items.get(java.lang.Integer.valueOf(paramInt));
    if (localRange == null) {
      throw new HashtableByteArrayEntry(paramInt + " is null");
    }
    return localRange;
  }
  
  public static void remove()
  {
    attributes.clear();
    this$0.clear();
    items.clear();
    year = null;
    status = false;
  }
  
  public static void remove(int paramInt, Document paramDocument)
  {
    int i = itemsgetjava.lang.Integervalue;
    ArrayList localArrayList = data[i];
    Object localObject = buffer[i];
    DavPropertyName localDavPropertyName = new DavPropertyName(paramInt, paramDocument);
    try
    {
      if (!localArrayList.contains(localDavPropertyName)) {
        localArrayList.add(new DavPropertyName(paramInt, paramDocument));
      }
    }
    catch (Throwable paramDocument)
    {
      throw paramDocument;
    }
    try
    {
      localObject.notifyAll();
      return;
    }
    catch (Throwable paramDocument)
    {
      throw paramDocument;
    }
    catch (Exception paramDocument)
    {
      for (;;) {}
    }
  }
  
  public static void remove(Range paramRange)
  {
    int i = value;
    ArrayList localArrayList = data[i];
    Object localObject = buffer[i];
    paramRange = new DavPropertyName(name, null);
    try
    {
      if (localArrayList.contains(paramRange)) {
        localArrayList.remove(paramRange);
      }
    }
    catch (Throwable paramRange)
    {
      throw paramRange;
    }
    try
    {
      localObject.notifyAll();
      return;
    }
    catch (Throwable paramRange)
    {
      throw paramRange;
    }
    catch (Exception paramRange)
    {
      for (;;) {}
    }
  }
  
  public static void remove(XmlReader paramXmlReader)
  {
    year = paramXmlReader;
  }
  
  public static void reset()
  {
    Object localObject = next;
    try
    {
      result = false;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static int size()
  {
    return items.size();
  }
  
  public static void stop()
  {
    if (mWakeLock != null) {
      mWakeLock.acquire(1000L);
    }
  }
  
  public static void verify(boolean paramBoolean)
  {
    end = paramBoolean;
  }
  
  public static boolean write()
  {
    Object localObject = next;
    for (;;)
    {
      try
      {
        if ((insert()) && (count[3] != 0))
        {
          bool = true;
          return bool;
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
      boolean bool = false;
    }
  }
  
  public static boolean write(Track paramTrack)
  {
    this$0.containsKey(java.lang.Integer.valueOf(type));
    this$0.put(java.lang.Integer.valueOf(type), paramTrack);
    return true;
  }
  
  public static DavPropertyName[] write(int paramInt)
  {
    ArrayList localArrayList = data[paramInt];
    Object localObject = buffer[paramInt];
    try
    {
      if (localArrayList.size() == 0) {
        localObject.wait();
      }
    }
    catch (Throwable localThrowable2) {}
    try
    {
      throw localThrowable2;
      try
      {
        int i = localArrayList.size();
        DavPropertyName[] arrayOfDavPropertyName = new DavPropertyName[i];
        paramInt = 0;
        while (paramInt < i)
        {
          arrayOfDavPropertyName[paramInt] = ((DavPropertyName)localArrayList.get(paramInt));
          paramInt += 1;
        }
        return arrayOfDavPropertyName;
      }
      catch (Throwable localThrowable1)
      {
        throw localThrowable1;
      }
    }
    catch (Exception localException)
    {
      for (;;) {}
    }
  }
  
  public final void execute(String paramString)
  {
    Object localObject;
    if (NotificationService.handler) {
      localObject = context;
    }
    try
    {
      localObject = new Handler(((Context)localObject).getMainLooper());
      ((Handler)localObject).post(new Plugin.1(this, paramString));
      return;
    }
    catch (Exception paramString) {}
  }
  
  public final void remove(boolean paramBoolean)
  {
    try
    {
      sent = paramBoolean;
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final boolean send()
  {
    try
    {
      boolean bool = sent;
      return bool;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
