package o;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Set;

public class Context
  extends ?<?, String, String>
{
  private static volatile Context c;
  
  public Context() {}
  
  public static Context get()
  {
    if (c == null) {
      try
      {
        if (c == null)
        {
          Context localContext = new Context();
          c = localContext;
          localContext.init(new Namespace());
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return c;
  }
  
  public final void add(String paramString, DavPropertyName paramDavPropertyName)
  {
    HashMap localHashMap = JSONArray.getAttributes();
    if (localHashMap == null) {
      return;
    }
    if (hash == null) {
      return;
    }
    Object localObject;
    if (hash.containsKey(paramString) == true)
    {
      localObject = (Model)hash.get(paramString);
    }
    else
    {
      Model localModel = (Model)type.toString(paramString, null);
      localObject = localModel;
      if (localModel != null)
      {
        hash.put(paramString, localModel);
        localObject = localModel;
      }
    }
    if (localObject == null) {
      return;
    }
    if (!((HttpConnection)localObject).equals())
    {
      if (((HttpConnection)localObject).encode()) {
        return;
      }
      if (((Model)localObject).save((Integer)localHashMap.get(paramString)))
      {
        name = paramDavPropertyName;
        paramString = new Thread((Runnable)localObject);
        data.put(localObject, paramString);
        paramString.start();
      }
    }
  }
  
  public final boolean add(Class paramClass)
  {
    HashMap localHashMap = hash;
    Namespace localNamespace = (Namespace)type;
    if (elements.containsKey(paramClass)) {
      paramClass = (String)elements.get(paramClass);
    } else {
      paramClass = "unknown type";
    }
    return localHashMap.containsKey(paramClass);
  }
  
  public final String get(Class paramClass)
  {
    Namespace localNamespace = (Namespace)type;
    if (elements.containsKey(paramClass)) {
      return (String)elements.get(paramClass);
    }
    return "unknown type";
  }
  
  public final void open()
  {
    try
    {
      Iterator localIterator = JSONArray.getAttributes().keySet().iterator();
      while (localIterator.hasNext()) {
        put((String)localIterator.next());
      }
      hash.clear();
      data.clear();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final void put(String paramString)
  {
    paramString = (Model)hash.get(paramString);
    if (paramString == null) {
      return;
    }
    paramString.flush();
    Thread localThread = (Thread)data.get(paramString);
    if (localThread != null) {
      try
      {
        localThread.join();
        data.remove(paramString);
        return;
      }
      catch (InterruptedException localInterruptedException)
      {
        for (;;) {}
      }
    }
  }
  
  public final void register()
  {
    Iterator localIterator = data.keySet().iterator();
    while (localIterator.hasNext())
    {
      Model localModel = (Model)localIterator.next();
      if ((localModel != null) && ((localModel instanceof Config))) {
        ((Config)localModel).get();
      }
    }
    Utils.sleep(2000);
  }
  
  public final Model remove(Class paramClass)
  {
    HashMap localHashMap = hash;
    Namespace localNamespace = (Namespace)type;
    if (elements.containsKey(paramClass)) {
      paramClass = (String)elements.get(paramClass);
    } else {
      paramClass = "unknown type";
    }
    return (Model)localHashMap.get(paramClass);
  }
}
