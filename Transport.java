package o;

import android.media.AudioTrack;
import android.os.Handler;
import java.util.concurrent.Semaphore;

public final class Transport
{
  private static double L;
  private static double a;
  private static double b;
  static byte[] context = null;
  private static boolean debug;
  static byte[] id;
  private static double[] image;
  private static Semaphore lock;
  static byte[] log;
  private static AudioTrack mAudioTrack;
  static byte[] name;
  private static double path;
  private static int timeout = 8000;
  private static double y;
  
  static
  {
    b = 1046.5D;
    L = 1174.66D;
    a = 1318.51D;
    y = 1567.98D;
    path = 1760.0D;
    image = new double[] { b, L, a, y, path };
    name = null;
    id = null;
    log = null;
    lock = new Semaphore(1, true);
  }
  
  public Transport() {}
  
  public static void connect()
  {
    if (NotificationService.handler)
    {
      if (!lock.tryAcquire()) {
        return;
      }
      try
      {
        init();
        JSONArray.get();
        JSONArray.access$getMHandler().post(new Local.1());
        lock.release();
        return;
      }
      catch (Throwable localThrowable)
      {
        lock.release();
        throw localThrowable;
      }
    }
  }
  
  public static void disconnect()
  {
    if (NotificationService.handler)
    {
      if (!lock.tryAcquire()) {
        return;
      }
      try
      {
        init();
        JSONArray.get();
        JSONArray.access$getMHandler().post(new NotificationService.3());
        lock.release();
        return;
      }
      catch (Throwable localThrowable)
      {
        lock.release();
        throw localThrowable;
      }
    }
  }
  
  public static void execute()
  {
    if (NotificationService.handler)
    {
      if (!lock.tryAcquire()) {
        return;
      }
      try
      {
        init();
        JSONArray.get();
        JSONArray.access$getMHandler().post(new SendingAsync());
        lock.release();
        return;
      }
      catch (Throwable localThrowable)
      {
        lock.release();
        throw localThrowable;
      }
    }
  }
  
  static void execute(byte[] paramArrayOfByte)
  {
    mAudioTrack.setStereoVolume(1.0F, 1.0F);
    mAudioTrack.write(paramArrayOfByte, 0, paramArrayOfByte.length);
    if (mAudioTrack.getPlayState() != 3)
    {
      mAudioTrack.flush();
      mAudioTrack.play();
      mAudioTrack.stop();
    }
  }
  
  private static void init()
  {
    try
    {
      if (debug) {
        return;
      }
      debug = true;
      if (name == null) {
        name = Utils.toByteArray(new byte[][] { update(0.1D, b), update(0.1D, a), update(0.1D, y) });
      }
      if (id == null) {
        id = update(0.1D, path);
      }
      if (context == null)
      {
        Util.read();
        String str = Util.initialize();
        int j = str.length();
        double[] arrayOfDouble = new double[7];
        i = 0;
        while (i < arrayOfDouble.length)
        {
          int k = str.charAt(j - i - 1);
          int m = image.length;
          arrayOfDouble[i] = image[(k % m)];
          i += 1;
        }
        context = Utils.toByteArray(new byte[][] { update(0.1D, arrayOfDouble[0]), update(0.1D, arrayOfDouble[1]), update(0.2D, arrayOfDouble[2]), update(0.1D, arrayOfDouble[3]), update(0.1D, arrayOfDouble[4]), update(0.2D, arrayOfDouble[5]), update(0.3D, arrayOfDouble[5]) });
      }
      if (log == null) {
        log = Utils.toByteArray(new byte[][] { update(0.1D, y), update(0.1D, a), update(0.1D, b) });
      }
      int i = Math.max(context.length, name.length);
      mAudioTrack = new AudioTrack(3, timeout, 2, 2, i, 1);
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public static void run()
  {
    if (NotificationService.handler)
    {
      if (!lock.tryAcquire()) {
        return;
      }
      try
      {
        init();
        JSONArray.get();
        JSONArray.access$getMHandler().post(new SplashScreen.5.1());
        lock.release();
        return;
      }
      catch (Throwable localThrowable)
      {
        lock.release();
        throw localThrowable;
      }
    }
  }
  
  private static byte[] update(double paramDouble1, double paramDouble2)
  {
    int j = (int)(8000.0D * paramDouble1);
    double[] arrayOfDouble = new double[j];
    byte[] arrayOfByte = new byte[j * 2];
    paramDouble1 = Math.pow(2.0D, 0.5833333333333334D);
    double d = Math.pow(2.0D, 0.3333333333333333D);
    int i = 0;
    while (i < j)
    {
      arrayOfDouble[i] = ((Math.sin(i * 6.283185307179586D / (8000.0D / paramDouble2)) * 0.6D + Math.sin(i * 6.283185307179586D / (8000.0D / (paramDouble2 * d))) * 0.2D + Math.sin(i * 6.283185307179586D / (8000.0D / (paramDouble2 * paramDouble1))) * 0.1D) * (1.0D - i / j));
      i += 1;
    }
    j = 0;
    int k = arrayOfDouble.length;
    i = 0;
    while (i < k)
    {
      int m = (short)(int)(arrayOfDouble[i] * 32767.0D);
      int n = j + 1;
      arrayOfByte[j] = ((byte)m);
      j = n + 1;
      arrayOfByte[n] = ((byte)(m >>> 8));
      i += 1;
    }
    return arrayOfByte;
  }
}
