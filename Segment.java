package o;

import java.util.Date;
import java.util.Vector;

public final class Segment
{
  private Date data;
  private int first;
  private int next;
  private Vector pos = new Vector();
  private boolean start;
  private boolean token;
  public Date type;
  public boolean value;
  
  public Segment(boolean paramBoolean, int paramInt)
  {
    this(paramBoolean, null, null, 4096, 4096);
  }
  
  public Segment(boolean paramBoolean, Date paramDate1, Date paramDate2, int paramInt1, int paramInt2)
  {
    token = paramBoolean;
    if (paramDate1 != null)
    {
      type = paramDate1;
      value = true;
    }
    if (paramDate2 != null)
    {
      data = paramDate2;
      start = true;
    }
    first = 4096;
    next = 4096;
  }
  
  public final boolean equals(Object paramObject)
  {
    if (paramObject == null) {
      return false;
    }
    if (!(paramObject instanceof Segment)) {
      return false;
    }
    paramObject = (Segment)paramObject;
    int i;
    if (value == value) {
      i = 1;
    } else {
      i = 0;
    }
    int j;
    if (start == start) {
      j = 1;
    } else {
      j = 0;
    }
    int k;
    if (type == type) {
      k = 1;
    } else {
      k = 0;
    }
    int m;
    if (data == data) {
      m = 1;
    } else {
      m = 0;
    }
    int n;
    if (token == token) {
      n = 1;
    } else {
      n = 0;
    }
    int i1;
    if (first == first) {
      i1 = 1;
    } else {
      i1 = 0;
    }
    int i2;
    if (next == next) {
      i2 = 1;
    } else {
      i2 = 0;
    }
    return i & 0x1 & j & k & m & n & i1 & i2;
  }
  
  public final int hashCode()
  {
    int k = type.hashCode();
    int m = data.hashCode();
    int i = 0;
    if (value) {
      i = 65536;
    }
    int j = i;
    if (start) {
      j = i | 0x20000;
    }
    return k ^ m ^ j ^ first << 16 ^ next;
  }
  
  public final int read(long paramLong)
  {
    if (!token) {
      return -1;
    }
    if ((0L != 0L) && (paramLong < 0L)) {
      return -2;
    }
    if ((value == true) && (paramLong < type.getTime())) {
      return -3;
    }
    if ((start == true) && (paramLong > data.getTime())) {
      return -4;
    }
    if ((next > 0) && (next < 0)) {
      return -5;
    }
    return 0;
  }
  
  public final String toString()
  {
    StringBuffer localStringBuffer = new StringBuffer();
    localStringBuffer.append(" RT");
    if ((value == true) && (type != null))
    {
      localStringBuffer.append(" from: ");
      localStringBuffer.append(type);
    }
    if ((start == true) && (data != null))
    {
      localStringBuffer.append(" to: ");
      localStringBuffer.append(data);
    }
    localStringBuffer.append(" size: " + first);
    localStringBuffer.append(" log: " + next);
    localStringBuffer.append(" en: " + token);
    return localStringBuffer.toString();
  }
}
