package o;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;

public final class Status
  extends Property
{
  private final long code = 86400000L;
  private boolean data = false;
  private long date;
  private long message;
  private boolean status;
  private Date time;
  private Date value;
  
  public Status() {}
  
  private void getTime()
  {
    Calendar localCalendar = GregorianCalendar.getInstance(TimeZone.getTimeZone("GMT"));
    int i = (localCalendar.get(11) * 3600 + localCalendar.get(12) * 60 + localCalendar.get(13)) * 1000;
    if (date < message ? (i <= date) && (i >= message) : (i < message) || (i > date)) {
      init();
    }
  }
  
  private boolean parse(boolean paramBoolean)
  {
    Calendar localCalendar = GregorianCalendar.getInstance(TimeZone.getTimeZone("UTC"));
    int i = (localCalendar.get(11) * 3600 + localCalendar.get(12) * 60 + localCalendar.get(13)) * 1000;
    if (paramBoolean) {
      getTime();
    }
    long l1;
    if (i < date) {
      l1 = date;
    } else {
      l1 = date + 86400000L;
    }
    long l2;
    if (i < message) {
      l2 = message;
    } else {
      l2 = message + 86400000L;
    }
    if (l1 < l2)
    {
      if (paramBoolean)
      {
        count = (l1 - i);
        set();
      }
      else
      {
        value = (l1 - i);
        set();
      }
      return true;
    }
    if (paramBoolean)
    {
      count = (l2 - i);
      set();
    }
    else
    {
      value = (l2 - i);
      set();
    }
    return false;
  }
  
  public final void doInBackground()
  {
    Calendar localCalendar = GregorianCalendar.getInstance(TimeZone.getTimeZone("UTC"));
    localCalendar.setTime(time);
    date = ((localCalendar.get(11) * 3600 + localCalendar.get(12) * 60 + localCalendar.get(13)) * 1000);
    localCalendar.setTime(value);
    message = ((localCalendar.get(11) * 3600 + localCalendar.get(12) * 60 + localCalendar.get(13)) * 1000);
    data = parse(true);
  }
  
  public final void execute()
  {
    if (status) {
      parse();
    }
  }
  
  public final boolean execute(Track paramTrack)
  {
    status = false;
    try
    {
      Object localObject = paramTrack.getString("ts");
      paramTrack = paramTrack.getString("te");
      SimpleDateFormat localSimpleDateFormat = new SimpleDateFormat("HH:mm:ss");
      localSimpleDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
      localObject = localSimpleDateFormat.parse((String)localObject);
      time = ((Date)localObject);
      paramTrack = localSimpleDateFormat.parse(paramTrack);
      value = paramTrack;
    }
    catch (JSONException paramTrack)
    {
      for (;;) {}
    }
    catch (ParseException paramTrack)
    {
      for (;;) {}
    }
    return false;
    return false;
    return true;
  }
  
  public final void read()
  {
    if (data)
    {
      init();
      status = true;
    }
    else
    {
      parse();
      status = false;
    }
    data = parse(false);
  }
}
