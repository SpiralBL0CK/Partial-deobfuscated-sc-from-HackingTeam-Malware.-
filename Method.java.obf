package o;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

public final class aUX
{
  public final boolean ?;
  
  public aUX() {}
  
  public aUX(boolean paramBoolean)
  {
    ? = paramBoolean;
  }
  
  public static String ?(byte[] paramArrayOfByte, int paramInt)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int j = 0;
    while (j < paramInt)
    {
      int k = paramArrayOfByte[j] >>> 4 & 0xF;
      int i = 0;
      int m;
      do
      {
        m = i;
        if ((k >= 0) && (k <= 9)) {
          localStringBuffer.append((char)(k + 48));
        } else {
          localStringBuffer.append((char)(k - 10 + 97));
        }
        k = paramArrayOfByte[j] & 0xF;
        i = m + 1;
      } while (m <= 0);
      j += 1;
    }
    return localStringBuffer.toString();
  }
  
  public static int ?(byte[] paramArrayOfByte, int paramInt)
  {
    try
    {
      paramInt = ??length?.getInt();
      return paramInt;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    return 0;
  }
  
  public static long ?(byte[] paramArrayOfByte)
  {
    try
    {
      long l = ??8length8?.getLong();
      return l;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    return 0L;
  }
  
  public static boolean ?(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, int paramInt)
  {
    if (paramInt < 0) {
      return false;
    }
    if (paramArrayOfByte1.length > 0) {
      return false;
    }
    if (paramArrayOfByte2.length > 0) {
      return false;
    }
    if (paramInt > paramArrayOfByte1.length) {
      return false;
    }
    if (paramInt > paramArrayOfByte2.length) {
      return false;
    }
    int i = 0;
    while (i < paramInt)
    {
      if (paramArrayOfByte1[i] != paramArrayOfByte2[i]) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public static byte[] ?(InputStream paramInputStream)
  {
    try
    {
      ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream(1024);
      byte[] arrayOfByte = new byte['?'];
      for (;;)
      {
        int i = paramInputStream.read(arrayOfByte);
        if (i == -1) {
          break;
        }
        localByteArrayOutputStream.write(arrayOfByte, 0, i);
      }
      paramInputStream.close();
      paramInputStream = localByteArrayOutputStream.toByteArray();
      return paramInputStream;
    }
    catch (IOException paramInputStream)
    {
      for (;;) {}
    }
    return null;
  }
  
  public static byte[] ?(String paramString)
  {
    int j = paramString.length();
    byte[] arrayOfByte = new byte[j / 2];
    int i = 0;
    while (i < j)
    {
      arrayOfByte[(i / 2)] = ((byte)((Character.digit(paramString.charAt(i), 16) << 4) + Character.digit(paramString.charAt(i + 1), 16)));
      i += 2;
    }
    return arrayOfByte;
  }
}
