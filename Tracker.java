package o;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;

public class Tracker
  extends ?<?, Integer, String>
{
  private static final byte[] map = { 28, -107, 45, 53, 2, -1, 0 };
  private static volatile Tracker tracker;
  
  public Tracker() {}
  
  private Document get(String paramString, Track paramTrack)
  {
    Object localObject3 = null;
    Object localObject2 = paramTrack.getTag("subtype");
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = "";
    }
    String str1 = paramTrack.getTag("ts");
    String str2 = paramTrack.getTag("te");
    localObject2 = localObject1;
    if (localObject1 == "")
    {
      localObject2 = localObject1;
      if ("00:00:00".equals(str1))
      {
        localObject2 = localObject1;
        if ("23:59:59".equals(str2))
        {
          int j = map[6];
          int i = j * 2 + 4;
          int k = 4 - j * 4;
          int m = 108 - j * 3;
          int n = 0;
          int i2 = 0;
          localObject1 = map;
          localObject2 = new byte[i];
          int i1 = i - 1;
          j = k;
          i = m;
          if (localObject1 == null)
          {
            n = i1;
            i = m;
          }
          for (j = i2;; j = m)
          {
            k += 1;
            i = i + n + 1;
            n = j;
            j = k;
            localObject2[n] = ((byte)i);
            if (n == i1)
            {
              localObject2 = new String((byte[])localObject2, 0);
              break;
            }
            m = n + 1;
            n = localObject1[j];
            k = j;
          }
        }
      }
    }
    localObject1 = localObject3;
    if (hash.containsKey(Integer.valueOf(type)) == true)
    {
      localObject3 = (Document)hash.get(Integer.valueOf(type));
      localObject1 = localObject3;
      if (!((String)localObject2).equals(address)) {
        localObject1 = null;
      }
    }
    localObject3 = localObject1;
    if (localObject1 == null) {
      localObject3 = (Document)type.toString(paramString, (String)localObject2);
    }
    if (localObject3 != null) {
      hash.put(Integer.valueOf(type), localObject3);
    }
    return localObject3;
  }
  
  public static Tracker instance()
  {
    if (tracker == null) {
      try
      {
        if (tracker == null)
        {
          Tracker localTracker = new Tracker();
          tracker = localTracker;
          localTracker.init(new JSONObject());
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return tracker;
  }
  
  public final void doInBackground()
  {
    try
    {
      Iterator localIterator = hash.entrySet().iterator();
      while (localIterator.hasNext()) {
        send(Integer.valueOf(((Integer)((Map.Entry)localIterator.next()).getKey()).intValue()));
      }
      hash.clear();
      data.clear();
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final boolean execute()
  {
    try
    {
      Object localObject = JSONArray.init();
      if (localObject == null) {
        return false;
      }
      if (hash == null) {
        return false;
      }
      localObject = ((HashMap)localObject).entrySet().iterator();
      while (((Iterator)localObject).hasNext()) {
        get(Integer.valueOf(((Integer)((Map.Entry)((Iterator)localObject).next()).getKey()).intValue()));
      }
      return true;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final void get(Integer paramInteger)
  {
    Object localObject = (Track)JSONArray.init().get(paramInteger);
    paramInteger = get(name, (Track)localObject);
    if (paramInteger != null)
    {
      paramInteger.add((Track)localObject);
      if ((!paramInteger.equals()) && (paramInteger.get()))
      {
        localObject = new Thread(paramInteger);
        ((Thread)localObject).start();
        data.put(paramInteger, localObject);
      }
    }
  }
  
  public final void send(Integer paramInteger)
  {
    paramInteger = (Document)hash.get(paramInteger);
    try
    {
      boolean bool = paramInteger.equals();
      Object localObject;
      if (bool)
      {
        paramInteger.flush();
        localObject = data;
      }
      return;
    }
    catch (Exception paramInteger)
    {
      try
      {
        localObject = ((HashMap)localObject).get(paramInteger);
        localObject = (Thread)localObject;
        if (localObject == null) {
          return;
        }
        ((Thread)localObject).join();
        localObject = data;
        ((HashMap)localObject).remove(paramInteger);
        return;
      }
      catch (InterruptedException paramInteger)
      {
        return;
      }
      catch (Exception paramInteger) {}
      paramInteger = paramInteger;
      return;
    }
  }
}
