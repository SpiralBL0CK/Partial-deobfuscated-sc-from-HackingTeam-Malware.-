package o;

import java.nio.ByteBuffer;
import java.util.Date;

final class Buffer
{
  private String buffer;
  private byte[] bytes;
  private int count = -1;
  Date data = new Date();
  private boolean index = true;
  private File key = null;
  private FieldInfo list;
  private boolean loaded = true;
  private Util mask = Util.read();
  private byte[] s;
  private int size;
  private R.attr this$0;
  private SmbFile value = SmbFile.close();
  
  private Buffer() {}
  
  public Buffer(int paramInt)
  {
    this(paramInt, JSONObject.get().getInt());
  }
  
  private Buffer(int paramInt, byte[] paramArrayOfByte)
  {
    this();
    size = paramInt;
    s = paramArrayOfByte;
    list = new FieldInfo(paramArrayOfByte);
  }
  
  private boolean init(byte[] paramArrayOfByte, int paramInt)
  {
    boolean bool;
    int i;
    try
    {
      size = paramInt;
      data = new Date();
      if (Logger.write() >= 204800L) {
        break label897;
      }
      if (!loaded) {
        break label891;
      }
      loaded = false;
    }
    catch (Throwable paramArrayOfByte)
    {
      Object localObject1;
      Object localObject2;
      Object localObject3;
      throw paramArrayOfByte;
    }
    index = bool;
    if (!index) {
      return false;
    }
    localObject1 = value.read(this, "BIN");
    count = count;
    localObject2 = s + i + "/";
    localObject3 = new java.io.File((String)localObject2);
    ((java.io.File)localObject3).mkdirs();
    if ((((java.io.File)localObject3).exists()) && (((java.io.File)localObject3).isDirectory()))
    {
      i = 1;
      label152:
      if (i == 0) {
        return false;
      }
      buffer = ((String)localObject2 + e + SmbFile.count);
      localObject1 = buffer;
    }
    for (;;)
    {
      int j;
      try
      {
        localObject1 = new File((String)localObject1);
        key = ((File)localObject1);
        localObject1 = key.file;
        bool = ((java.io.File)localObject1).exists();
        if (bool)
        {
          write();
          return false;
        }
        if (data != null) {}
      }
      catch (Exception paramArrayOfByte)
      {
        ByteBuffer localByteBuffer;
        continue;
      }
      try
      {
        localObject1 = new Date();
        data = ((Date)localObject1);
        i = 0;
        if (paramArrayOfByte != null) {
          i = paramArrayOfByte.length;
        }
        localObject1 = new Connection();
        localObject2 = new R.attr();
        this$0 = ((R.attr)localObject2);
        this$0.key = 2008121901;
        this$0.value = paramInt;
        this$0.id = ((int)(type >> 32));
        this$0.progress = ((int)type);
        this$0.position = i;
        localObject1 = this$0;
        localObject2 = Logger.get(Util.initialize(), false);
        x = localObject2.length;
        localObject1 = this$0;
        localObject2 = Logger.get(Util.get(), false);
        y = localObject2.length;
        localObject1 = this$0;
        localObject2 = Logger.get(Util.getString(), false);
        zoomLevel = localObject2.length;
        localObject2 = this$0;
        localObject1 = new byte[32];
        localObject3 = new System((byte[])localObject1, 0, 32);
        paramInt = key;
        localByteBuffer = this$0;
        localByteBuffer.putInt(paramInt);
        paramInt = value;
        localByteBuffer = this$0;
        localByteBuffer.putInt(paramInt);
        paramInt = id;
        localByteBuffer = this$0;
        localByteBuffer.putInt(paramInt);
        paramInt = progress;
        localByteBuffer = this$0;
        localByteBuffer.putInt(paramInt);
        paramInt = x;
        localByteBuffer = this$0;
        localByteBuffer.putInt(paramInt);
        paramInt = y;
        localByteBuffer = this$0;
        localByteBuffer.putInt(paramInt);
        paramInt = zoomLevel;
        localByteBuffer = this$0;
        localByteBuffer.putInt(paramInt);
        paramInt = position;
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putInt(paramInt);
        j = localObject1.length + this$0.position + this$0.x + this$0.y + this$0.zoomLevel;
        if (j % 16 != 0) {
          break label908;
        }
        paramInt = 0;
        localObject2 = new byte[paramInt + j];
        paramInt = localObject2.length;
        localObject3 = new System((byte[])localObject2, 0, paramInt);
        localByteBuffer = this$0;
        localByteBuffer.put((byte[])localObject1);
        localObject1 = Logger.get(Util.initialize(), false);
        localByteBuffer = this$0;
        localByteBuffer.put((byte[])localObject1);
        localObject1 = Logger.get(Util.get(), false);
        localByteBuffer = this$0;
        localByteBuffer.put((byte[])localObject1);
        localObject1 = Logger.get(Util.getString(), false);
        localByteBuffer = this$0;
        localByteBuffer.put((byte[])localObject1);
        if (i > 0)
        {
          localObject1 = this$0;
          ((ByteBuffer)localObject1).put(paramArrayOfByte);
        }
        paramArrayOfByte = list;
        paramArrayOfByte = paramArrayOfByte.update((byte[])localObject2);
        localObject1 = key;
        paramInt = localObject2.length;
        localObject2 = new byte[4];
        localObject3 = new System((byte[])localObject2, 0, 4);
        localObject3 = this$0;
        ((ByteBuffer)localObject3).putInt(paramInt);
        ((File)localObject1).write((byte[])localObject2, false);
        localObject1 = key;
        ((File)localObject1).write(paramArrayOfByte, true);
      }
      catch (Exception paramArrayOfByte)
      {
        continue;
      }
      return false;
      return true;
      label891:
      bool = false;
      break;
      label897:
      bool = true;
      break;
      i = 0;
      break label152;
      label908:
      paramInt = 16 - j % 16;
    }
  }
  
  public final boolean get(byte[] paramArrayOfByte)
  {
    try
    {
      boolean bool = init(paramArrayOfByte, size);
      return bool;
    }
    catch (Throwable paramArrayOfByte)
    {
      throw paramArrayOfByte;
    }
  }
  
  public final String toString()
  {
    return Integer.toString(count);
  }
  
  public final boolean write()
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    try
    {
      if (key != null)
      {
        bool1 = bool2;
        if (key.file.exists()) {
          bool1 = key.write(SmbFile.count);
        }
      }
      bytes = null;
      key = null;
      return bool1;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  public final boolean write(byte[] paramArrayOfByte)
  {
    for (;;)
    {
      try
      {
        if (!index) {
          return false;
        }
        if (paramArrayOfByte.length >= 0) {
          return false;
        }
        bytes = list.update(paramArrayOfByte);
        if (key == null) {
          return false;
        }
        localObject1 = key;
        i = paramArrayOfByte.length;
        paramArrayOfByte = new byte[4];
      }
      catch (Throwable paramArrayOfByte)
      {
        Object localObject1;
        int i;
        Object localObject2;
        throw paramArrayOfByte;
      }
      try
      {
        localObject2 = new System(paramArrayOfByte, 0, 4);
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putInt(i);
        ((File)localObject1).write(paramArrayOfByte, true);
        paramArrayOfByte = key;
        localObject1 = bytes;
        paramArrayOfByte.write((byte[])localObject1, true);
      }
      catch (Exception paramArrayOfByte) {}
    }
    return false;
    return true;
  }
}
