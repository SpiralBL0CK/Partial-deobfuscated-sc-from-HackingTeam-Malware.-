package o;

import android.app.ActivityManager.RunningAppProcessInfo;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeMap;

public class Event
  extends ?<??>
  implements ?<aUX>
{
  private static volatile Event mProgressBar;
  private boolean data;
  private Object key = new Object();
  private TreeMap<String, ActivityManager.RunningAppProcessInfo> map = new TreeMap();
  private PullToRefreshBase.SmoothScrollRunnable task;
  private TreeMap<String, ActivityManager.RunningAppProcessInfo> this$0 = new TreeMap();
  private Object type = new Object();
  
  public Event()
  {
    Object localObject1 = key;
    for (;;)
    {
      try
      {
        ProgressBar.newInstance().add(this);
        if (!ProgressBar.start())
        {
          bool = true;
          Object localObject2 = id;
          try
          {
            size = bool;
          }
          catch (Throwable localThrowable2)
          {
            throw localThrowable2;
          }
          return;
        }
      }
      catch (Throwable localThrowable1)
      {
        throw localThrowable1;
      }
      boolean bool = false;
    }
  }
  
  private int getValue(Method paramMethod)
  {
    Object localObject = key;
    try
    {
      if (value) {
        delete();
      } else {
        save();
      }
    }
    catch (Throwable paramMethod)
    {
      throw paramMethod;
    }
    return 0;
  }
  
  public static Event newInstance()
  {
    if (mProgressBar == null) {
      try
      {
        if (mProgressBar == null) {
          mProgressBar = new Event();
        }
      }
      catch (Throwable localThrowable)
      {
        throw localThrowable;
      }
    }
    return mProgressBar;
  }
  
  protected final int doInBackground(Updater paramUpdater)
  {
    paramUpdater = paramUpdater.run();
    if (paramUpdater == null) {
      return 0;
    }
    map.clear();
    paramUpdater = paramUpdater.iterator();
    Object localObject;
    while (paramUpdater.hasNext())
    {
      localObject = (ActivityManager.RunningAppProcessInfo)paramUpdater.next();
      if (importance == 100)
      {
        map.put(processName, localObject);
        if (!this$0.containsKey(processName)) {
          update(new AnyObjectId((ActivityManager.RunningAppProcessInfo)localObject, NameType.this$0));
        } else {
          this$0.remove(processName);
        }
      }
    }
    paramUpdater = this$0.keySet().iterator();
    while (paramUpdater.hasNext())
    {
      localObject = (String)paramUpdater.next();
      super.update(new AnyObjectId((ActivityManager.RunningAppProcessInfo)this$0.get(localObject), NameType.name));
    }
    this$0 = ((TreeMap)map.clone());
    return 0;
  }
  
  protected final void init()
  {
    Object localObject = type;
    try
    {
      if ((!data) && (ProgressBar.start()))
      {
        data = true;
        task = new PullToRefreshBase.SmoothScrollRunnable();
        task.start();
        task.run(this);
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
  
  protected final void onCreate()
  {
    Object localObject = type;
    try
    {
      if (data)
      {
        data = false;
        if (task != null)
        {
          task.stop();
          task = null;
        }
      }
      return;
    }
    catch (Throwable localThrowable)
    {
      throw localThrowable;
    }
  }
}
