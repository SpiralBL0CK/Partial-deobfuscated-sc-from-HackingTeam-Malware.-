package o;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.util.Arrays;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;

public final class UnboundedFifoByteBuffer
{
  public CyclicBuffer buffer;
  
  public UnboundedFifoByteBuffer() {}
  
  /* Error */
  public UnboundedFifoByteBuffer(byte[] paramArrayOfByte)
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 10	java/lang/Object:<init>	()V
    //   4: new 18	o/CyclicBuffer
    //   7: dup
    //   8: aload_1
    //   9: invokespecial 20	o/CyclicBuffer:<init>	([B)V
    //   12: astore_1
    //   13: aload_0
    //   14: aload_1
    //   15: putfield 22	o/UnboundedFifoByteBuffer:buffer	Lo/CyclicBuffer;
    //   18: return
    //   19: new 16	o/ActivatingIterator
    //   22: dup
    //   23: invokespecial 23	o/ActivatingIterator:<init>	()V
    //   26: athrow
    //   27: astore_1
    //   28: goto -9 -> 19
    //   31: astore_1
    //   32: return
    //   33: astore_1
    //   34: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	35	0	this	UnboundedFifoByteBuffer
    //   0	35	1	paramArrayOfByte	byte[]
    // Exception table:
    //   from	to	target	type
    //   4	13	27	java/lang/Exception
    //   4	13	31	o/ActivatingIterator
    //   19	27	33	o/ActivatingIterator
  }
  
  public final byte[] add(byte[] paramArrayOfByte)
  {
    Object localObject = buffer;
    long l = paramArrayOfByte.length;
    localObject = a;
    int i = (int)l;
    try
    {
      paramArrayOfByte = ((Cipher)localObject).doFinal(paramArrayOfByte, 0, i);
    }
    catch (Exception paramArrayOfByte)
    {
      byte[] arrayOfByte;
      for (;;) {}
    }
    return null;
    i = paramArrayOfByte.length - 20;
    localObject = new byte[i];
    System.arraycopy(paramArrayOfByte, 0, localObject, 0, i);
    i = paramArrayOfByte.length;
    arrayOfByte = new byte[20];
    System.arraycopy(paramArrayOfByte, i - 20, arrayOfByte, 0, 20);
    if (Arrays.equals(Files.encode(paramArrayOfByte, paramArrayOfByte.length - 20), arrayOfByte)) {
      return localObject;
    }
    throw new ActivatingIterator();
  }
  
  public final byte[] add(byte[] paramArrayOfByte, long paramLong)
  {
    Cipher localCipher = buffer.a;
    int i = (int)paramLong;
    try
    {
      paramArrayOfByte = localCipher.doFinal(paramArrayOfByte, 0, i);
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new ActivatingIterator();
  }
  
  public final byte[] get(byte[] paramArrayOfByte)
  {
    paramArrayOfByte = Utils.toByteArray(new byte[][] { paramArrayOfByte, Files.encode(paramArrayOfByte, paramArrayOfByte.length) });
    Cipher localCipher = buffer.cipher;
    try
    {
      paramArrayOfByte = localCipher.doFinal(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (Exception paramArrayOfByte)
    {
      for (;;) {}
    }
    return null;
  }
  
  public final byte[] remove(byte[] paramArrayOfByte)
  {
    Cipher localCipher = buffer.cipher;
    try
    {
      paramArrayOfByte = localCipher.doFinal(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (InvalidKeyException paramArrayOfByte)
    {
      for (;;) {}
    }
    catch (InvalidAlgorithmParameterException paramArrayOfByte)
    {
      for (;;) {}
    }
    catch (IllegalBlockSizeException paramArrayOfByte)
    {
      for (;;) {}
    }
    catch (BadPaddingException paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new ActivatingIterator();
  }
}
