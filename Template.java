package o;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.LinkedBlockingQueue;

public class Template
  extends ?
  implements ?<??>
{
  private WebSocketReader.FramedMessageSource this$0 = new WebSocketReader.FramedMessageSource(this);
  
  public Template()
  {
    this$0.read(new Page());
    this$0.read(new Parser());
    this$0.read(new WebmExtractor());
    this$0.read(new Database());
    this$0.read(new ImageLoader());
    this$0.read(new Media());
    this$0.read(new HttpRequest());
  }
  
  public static void run(ArrayList paramArrayList)
  {
    Object localObject1 = new ArrayList();
    paramArrayList = paramArrayList.iterator();
    while (paramArrayList.hasNext())
    {
      Object localObject2 = (Comment)paramArrayList.next();
      ((ArrayList)localObject1).add(new Connection(date).load());
      int i = type;
      byte[] arrayOfByte = new byte[4];
      System04this$0.putInt(i);
      ((ArrayList)localObject1).add(arrayOfByte);
      if (version) {
        i = 1;
      } else {
        i = 0;
      }
      arrayOfByte = new byte[4];
      System04this$0.putInt(i);
      ((ArrayList)localObject1).add(arrayOfByte);
      ((ArrayList)localObject1).add(Logger.get(value, true));
      ((ArrayList)localObject1).add(Logger.get(key, true));
      ((ArrayList)localObject1).add(Logger.get(id, true));
      ((ArrayList)localObject1).add(Logger.get(hash, true));
      ((ArrayList)localObject1).add(Logger.get(url, true));
      i = Type.TAG;
      localObject2 = new byte[4];
      System04this$0.putInt(i);
      ((ArrayList)localObject1).add(localObject2);
    }
    paramArrayList = new Field(50887, (ArrayList)localObject1);
    localObject1 = getthis$0;
    try
    {
      ((LinkedBlockingQueue)localObject1).put(paramArrayList);
      return;
    }
    catch (Exception paramArrayList) {}
  }
  
  protected final void doInBackground()
  {
    Event.newInstance().add(this);
    this$0.read();
  }
  
  protected final void execute()
  {
    Iterator localIterator = this$0.programs.iterator();
    while (localIterator.hasNext()) {
      localIterator.next();
    }
    Event.newInstance().update(this);
  }
  
  protected final boolean execute(Integer paramInteger)
  {
    JSONArray.get();
    if (JSONArray.length())
    {
      count = 0L;
      set();
      value = Long.MAX_VALUE;
      set();
      return true;
    }
    return false;
  }
  
  protected final void read()
  {
    Iterator localIterator = this$0.programs.iterator();
    while (localIterator.hasNext()) {
      localIterator.next();
    }
  }
}
