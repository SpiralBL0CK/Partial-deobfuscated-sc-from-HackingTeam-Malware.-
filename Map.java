package o;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import java.io.IOException;

public final class Map
{
  private static Object cache = new Object();
  public String context = null;
  private SQLiteDatabase db;
  public boolean id = false;
  
  public Map(SQLiteDatabase paramSQLiteDatabase)
  {
    db = paramSQLiteDatabase;
  }
  
  private Map(String paramString, boolean paramBoolean)
  {
    context = paramString;
    id = paramBoolean;
  }
  
  private long get(Cursor paramCursor, AsyncTask paramAsyncTask, String[] paramArrayOfString)
  {
    int i = paramCursor.getCount();
    line = paramArrayOfString;
    remaining = i;
    paramAsyncTask.init();
    for (long l = 0L; (paramCursor != null) && (paramCursor.moveToNext()) && (!paramAsyncTask.get()); l = Math.max(paramAsyncTask.doInBackground(paramCursor), l)) {}
    paramAsyncTask.execute();
    if (id) {
      new java.io.File(context).delete();
    }
    return l;
  }
  
  public static Map get(String paramString)
  {
    Object localObject = new java.io.File(paramString);
    if ((Logger.execute(((java.io.File)localObject).getParent(), false)) && (Logger.execute(((java.io.File)localObject).getAbsolutePath(), false)) && (((java.io.File)localObject).exists()) && (((java.io.File)localObject).canRead())) {
      paramString = ((java.io.File)localObject).getAbsolutePath();
    } else {
      return null;
    }
    localObject = new StringBuilder().append(Logger.name).append(Logger.length).toString() + ((java.io.File)localObject).getName();
    try
    {
      paramString = new java.io.File(paramString);
      Utils.moveFile(paramString, new java.io.File((String)localObject));
    }
    catch (IOException paramString)
    {
      for (;;) {}
    }
    return null;
    return new Map((String)localObject, true);
  }
  
  public static Map getName(java.io.File paramFile)
  {
    if ((paramFile.exists()) && (Logger.execute(paramFile.getParent(), false)) && (Logger.execute(paramFile.getAbsolutePath(), false))) {
      return new Map(paramFile.getAbsolutePath(), false);
    }
    return null;
  }
  
  public final long get(String paramString, AsyncTask paramAsyncTask)
  {
    Object localObject1 = cache;
    try
    {
      db = open();
      Object localObject2 = new SQLiteQueryBuilder();
      ((SQLiteQueryBuilder)localObject2).setTables(paramString);
      localObject2 = ((SQLiteQueryBuilder)localObject2).query(db, paramAsyncTask.getValues(), paramAsyncTask.getData(), null, null, null, name);
      long l = get((Cursor)localObject2, paramAsyncTask, new String[] { paramString });
      ((Cursor)localObject2).close();
      if (db != null)
      {
        db.close();
        db = null;
      }
      return l;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public final long get(String paramString, String[] paramArrayOfString, AsyncTask paramAsyncTask)
  {
    Object localObject = cache;
    try
    {
      db = open();
      paramString = db.rawQuery(paramString, paramArrayOfString);
      long l = get(paramString, paramAsyncTask, new String[0]);
      paramString.close();
      if (db != null)
      {
        db.close();
        db = null;
      }
      return l;
    }
    catch (Throwable paramString)
    {
      throw paramString;
    }
  }
  
  public final SQLiteDatabase open()
  {
    if ((db != null) && (db.isOpen())) {
      return db;
    }
    try
    {
      Object localObject = context;
      String str1 = new java.io.File((String)localObject).getParent();
      String str2 = new java.io.File(str1).getParent();
      String str3 = new java.io.File(str2).getParent();
      Logger.get(new java.io.File(str3).getParent(), -1, true);
      Logger.execute(str3, true);
      Logger.execute(str2, true);
      Logger.execute(str1, true);
      Logger.execute((String)localObject, true);
      Logger.execute(context + "*", true);
      boolean bool = Filecontext).file.exists();
      if (bool)
      {
        localObject = SQLiteDatabase.openDatabase(context, null, 17);
        return localObject;
      }
    }
    catch (Throwable localThrowable)
    {
      for (;;) {}
    }
    return null;
  }
}
