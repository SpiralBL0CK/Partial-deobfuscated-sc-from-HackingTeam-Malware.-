package o;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.Date;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;

public final class ByteVector
  extends Engine
{
  private final UnboundedFifoByteBuffer buffer;
  private byte[] key;
  private Vector<String> params;
  private SecureRandom random;
  private byte[] size;
  private final UnboundedFifoByteBuffer this$0;
  
  /* Error */
  public ByteVector()
  {
    // Byte code:
    //   0: aload_0
    //   1: invokespecial 23	o/Engine:<init>	()V
    //   4: aload_0
    //   5: new 25	o/UnboundedFifoByteBuffer
    //   8: dup
    //   9: invokespecial 26	o/UnboundedFifoByteBuffer:<init>	()V
    //   12: putfield 28	o/ByteVector:this$0	Lo/UnboundedFifoByteBuffer;
    //   15: aload_0
    //   16: new 25	o/UnboundedFifoByteBuffer
    //   19: dup
    //   20: invokespecial 26	o/UnboundedFifoByteBuffer:<init>	()V
    //   23: putfield 30	o/ByteVector:buffer	Lo/UnboundedFifoByteBuffer;
    //   26: aload_0
    //   27: bipush 16
    //   29: newarray byte
    //   31: putfield 32	o/ByteVector:key	[B
    //   34: aload_0
    //   35: bipush 16
    //   37: newarray byte
    //   39: putfield 34	o/ByteVector:size	[B
    //   42: aload_0
    //   43: new 36	java/util/Vector
    //   46: dup
    //   47: invokespecial 37	java/util/Vector:<init>	()V
    //   50: putfield 39	o/ByteVector:params	Ljava/util/Vector;
    //   53: goto +9 -> 62
    //   56: astore_1
    //   57: aload_1
    //   58: invokevirtual 43	java/lang/Throwable:getCause	()Ljava/lang/Throwable;
    //   61: athrow
    //   62: ldc 45
    //   64: invokestatic 51	o/Log:get	(Ljava/lang/String;)Ljava/lang/Class;
    //   67: ldc 53
    //   69: iconst_1
    //   70: anewarray 55	java/lang/Class
    //   73: dup
    //   74: iconst_0
    //   75: ldc 57
    //   77: aastore
    //   78: invokevirtual 61	java/lang/Class:getMethod	(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
    //   81: aconst_null
    //   82: iconst_1
    //   83: anewarray 63	java/lang/Object
    //   86: dup
    //   87: iconst_0
    //   88: ldc 65
    //   90: aastore
    //   91: invokevirtual 71	java/lang/reflect/Method:invoke	(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    //   94: checkcast 57	java/lang/String
    //   97: astore_1
    //   98: aload_1
    //   99: invokestatic 77	java/security/SecureRandom:getInstance	(Ljava/lang/String;)Ljava/security/SecureRandom;
    //   102: astore_1
    //   103: aload_0
    //   104: aload_1
    //   105: putfield 79	o/ByteVector:random	Ljava/security/SecureRandom;
    //   108: return
    //   109: astore_1
    //   110: return
    //   111: astore_1
    //   112: return
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	113	0	this	ByteVector
    //   56	2	1	localThrowable	Throwable
    //   97	8	1	localObject	Object
    //   109	1	1	localNoSuchAlgorithmException1	java.security.NoSuchAlgorithmException
    //   111	1	1	localNoSuchAlgorithmException2	java.security.NoSuchAlgorithmException
    // Exception table:
    //   from	to	target	type
    //   62	98	56	java/lang/Throwable
    //   57	62	109	java/security/NoSuchAlgorithmException
    //   98	103	111	java/security/NoSuchAlgorithmException
  }
  
  private void add(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      params.removeAllElements();
      paramBoolean = true;
    }
    for (;;)
    {
      if (paramBoolean) {}
      try
      {
        paramBoolean = get(add(22, Logger.get("v2")));
      }
      catch (Exception localException) {}
    }
    return;
  }
  
  private boolean add()
  {
    Object localObject1 = buffer;
    for (;;)
    {
      try
      {
        localObject2 = JSONObject.get().getString();
      }
      catch (ActivatingIterator localActivatingIterator1)
      {
        Object localObject2;
        Object localObject4;
        int i;
        Object localObject3;
        Object localObject5;
        Object localObject6;
        Object localObject7;
        boolean bool;
        continue;
      }
      try
      {
        localObject2 = new CyclicBuffer((byte[])localObject2);
        buffer = ((CyclicBuffer)localObject2);
      }
      catch (Exception localException) {}catch (ActivatingIterator localActivatingIterator2) {}
    }
    try
    {
      throw new ActivatingIterator();
    }
    catch (ActivatingIterator localActivatingIterator3)
    {
      break label496;
    }
    localObject1 = random;
    localObject2 = key;
    ((SecureRandom)localObject1).nextBytes((byte[])localObject2);
    localObject1 = random;
    localObject2 = size;
    ((SecureRandom)localObject1).nextBytes((byte[])localObject2);
    localObject1 = buffer;
    localObject4 = JSONObject.get();
    localObject2 = new byte[104];
    i = localObject2.length;
    localObject3 = new System((byte[])localObject2, 0, i);
    localObject5 = key;
    localObject6 = this$0;
    ((ByteBuffer)localObject6).put((byte[])localObject5);
    localObject5 = size;
    localObject6 = this$0;
    ((ByteBuffer)localObject6).put((byte[])localObject5);
    localObject6 = ((JsonObject)localObject4).has();
    localObject5 = new byte[16];
    i = localObject6.length;
    java.lang.System.arraycopy(localObject6, 0, localObject5, 0, Math.min(16, i));
    localObject6 = this$0;
    ((ByteBuffer)localObject6).put((byte[])localObject5);
    localObject5 = ((JsonObject)localObject4).remove();
    localObject6 = this$0;
    ((ByteBuffer)localObject6).put((byte[])localObject5);
    localObject6 = JSONObject.update();
    localObject5 = new byte[16];
    i = localObject6.length;
    java.lang.System.arraycopy(localObject6, 0, localObject5, 0, Math.min(16, i));
    localObject6 = this$0;
    ((ByteBuffer)localObject6).put((byte[])localObject5);
    localObject5 = new DescriptorMatcher();
    localObject7 = ((JsonObject)localObject4).has();
    localObject6 = new byte[16];
    i = localObject7.length;
    java.lang.System.arraycopy(localObject7, 0, localObject6, 0, Math.min(16, i));
    localObject7 = this$0;
    i = localObject6.length;
    ((MessageDigest)localObject7).update((byte[])localObject6, 0, i);
    localObject6 = ((JsonObject)localObject4).remove();
    localObject7 = this$0;
    i = localObject6.length;
    ((MessageDigest)localObject7).update((byte[])localObject6, 0, i);
    localObject7 = JSONObject.update();
    localObject6 = new byte[16];
    i = localObject7.length;
    java.lang.System.arraycopy(localObject7, 0, localObject6, 0, Math.min(16, i));
    localObject7 = this$0;
    i = localObject6.length;
    ((MessageDigest)localObject7).update((byte[])localObject6, 0, i);
    localObject4 = ((JsonObject)localObject4).getValue();
    localObject6 = this$0;
    i = localObject4.length;
    ((MessageDigest)localObject6).update((byte[])localObject4, 0, i);
    localObject4 = this$0;
    localObject4 = ((MessageDigest)localObject4).digest();
    localObject3 = this$0;
    ((ByteBuffer)localObject3).put((byte[])localObject4);
    localObject1 = ((UnboundedFifoByteBuffer)localObject1).remove((byte[])localObject2);
    localObject2 = delegate;
    bool = add(((Resource)localObject2).process((byte[])localObject1));
    return bool;
    label496:
    return false;
  }
  
  /* Error */
  private boolean add(byte[] paramArrayOfByte)
  {
    // Byte code:
    //   0: aload_1
    //   1: ifnonnull +13 -> 14
    //   4: new 193	o/ObjectMap
    //   7: dup
    //   8: bipush 100
    //   10: invokespecial 196	o/ObjectMap:<init>	(I)V
    //   13: athrow
    //   14: new 57	java/lang/String
    //   17: dup
    //   18: aload_1
    //   19: invokespecial 197	java/lang/String:<init>	([B)V
    //   22: astore 6
    //   24: goto +9 -> 33
    //   27: astore_1
    //   28: aload_1
    //   29: invokevirtual 43	java/lang/Throwable:getCause	()Ljava/lang/Throwable;
    //   32: athrow
    //   33: ldc 45
    //   35: invokestatic 51	o/Log:get	(Ljava/lang/String;)Ljava/lang/Class;
    //   38: ldc -57
    //   40: iconst_1
    //   41: anewarray 55	java/lang/Class
    //   44: dup
    //   45: iconst_0
    //   46: ldc 57
    //   48: aastore
    //   49: invokevirtual 61	java/lang/Class:getMethod	(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
    //   52: aconst_null
    //   53: iconst_1
    //   54: anewarray 63	java/lang/Object
    //   57: dup
    //   58: iconst_0
    //   59: ldc -55
    //   61: aastore
    //   62: invokevirtual 71	java/lang/reflect/Method:invoke	(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    //   65: checkcast 203	java/lang/CharSequence
    //   68: astore 7
    //   70: aload 6
    //   72: aload 7
    //   74: invokevirtual 207	java/lang/String:contains	(Ljava/lang/CharSequence;)Z
    //   77: ifeq +13 -> 90
    //   80: new 193	o/ObjectMap
    //   83: dup
    //   84: bipush 14
    //   86: invokespecial 196	o/ObjectMap:<init>	(I)V
    //   89: athrow
    //   90: bipush 32
    //   92: newarray byte
    //   94: astore 6
    //   96: aload_1
    //   97: iconst_0
    //   98: aload 6
    //   100: iconst_0
    //   101: aload 6
    //   103: arraylength
    //   104: invokestatic 155	java/lang/System:arraycopy	(Ljava/lang/Object;ILjava/lang/Object;II)V
    //   107: aload_0
    //   108: getfield 30	o/ByteVector:buffer	Lo/UnboundedFifoByteBuffer;
    //   111: astore 7
    //   113: aload 6
    //   115: arraylength
    //   116: i2l
    //   117: lstore_3
    //   118: aload 7
    //   120: aload 6
    //   122: lload_3
    //   123: invokevirtual 210	o/UnboundedFifoByteBuffer:add	([BJ)[B
    //   126: astore 7
    //   128: new 163	o/DescriptorMatcher
    //   131: dup
    //   132: invokespecial 164	o/DescriptorMatcher:<init>	()V
    //   135: astore 6
    //   137: invokestatic 108	o/JSONObject:get	()Lo/JSONObject;
    //   140: invokeinterface 174 1 0
    //   145: astore 8
    //   147: aload 6
    //   149: getfield 167	o/DescriptorMatcher:this$0	Ljava/security/MessageDigest;
    //   152: astore 9
    //   154: aload 8
    //   156: arraylength
    //   157: istore_2
    //   158: aload 9
    //   160: aload 8
    //   162: iconst_0
    //   163: iload_2
    //   164: invokevirtual 171	java/security/MessageDigest:update	([BII)V
    //   167: aload 6
    //   169: getfield 167	o/DescriptorMatcher:this$0	Ljava/security/MessageDigest;
    //   172: astore 8
    //   174: aload 7
    //   176: arraylength
    //   177: istore_2
    //   178: aload 8
    //   180: aload 7
    //   182: iconst_0
    //   183: iload_2
    //   184: invokevirtual 171	java/security/MessageDigest:update	([BII)V
    //   187: aload_0
    //   188: getfield 32	o/ByteVector:key	[B
    //   191: astore 7
    //   193: aload 6
    //   195: getfield 167	o/DescriptorMatcher:this$0	Ljava/security/MessageDigest;
    //   198: astore 8
    //   200: aload 7
    //   202: arraylength
    //   203: istore_2
    //   204: aload 8
    //   206: aload 7
    //   208: iconst_0
    //   209: iload_2
    //   210: invokevirtual 171	java/security/MessageDigest:update	([BII)V
    //   213: bipush 16
    //   215: newarray byte
    //   217: astore 7
    //   219: aload 6
    //   221: getfield 167	o/DescriptorMatcher:this$0	Ljava/security/MessageDigest;
    //   224: astore 6
    //   226: aload 6
    //   228: invokevirtual 177	java/security/MessageDigest:digest	()[B
    //   231: astore 6
    //   233: aload 7
    //   235: arraylength
    //   236: istore_2
    //   237: aload 6
    //   239: iconst_0
    //   240: aload 7
    //   242: iconst_0
    //   243: iload_2
    //   244: invokestatic 155	java/lang/System:arraycopy	(Ljava/lang/Object;ILjava/lang/Object;II)V
    //   247: aload_0
    //   248: getfield 28	o/ByteVector:this$0	Lo/UnboundedFifoByteBuffer;
    //   251: astore 6
    //   253: new 116	o/CyclicBuffer
    //   256: dup
    //   257: aload 7
    //   259: invokespecial 119	o/CyclicBuffer:<init>	([B)V
    //   262: astore 7
    //   264: aload 6
    //   266: aload 7
    //   268: putfield 122	o/UnboundedFifoByteBuffer:buffer	Lo/CyclicBuffer;
    //   271: goto +11 -> 282
    //   274: new 103	o/ActivatingIterator
    //   277: dup
    //   278: invokespecial 123	o/ActivatingIterator:<init>	()V
    //   281: athrow
    //   282: bipush 32
    //   284: newarray byte
    //   286: astore 6
    //   288: aload 6
    //   290: arraylength
    //   291: istore_2
    //   292: aload_1
    //   293: bipush 32
    //   295: aload 6
    //   297: iconst_0
    //   298: iload_2
    //   299: invokestatic 155	java/lang/System:arraycopy	(Ljava/lang/Object;ILjava/lang/Object;II)V
    //   302: aload_0
    //   303: getfield 28	o/ByteVector:this$0	Lo/UnboundedFifoByteBuffer;
    //   306: astore_1
    //   307: aload 6
    //   309: arraylength
    //   310: i2l
    //   311: lstore_3
    //   312: aload_1
    //   313: aload 6
    //   315: lload_3
    //   316: invokevirtual 210	o/UnboundedFifoByteBuffer:add	([BJ)[B
    //   319: astore_1
    //   320: aload_0
    //   321: getfield 34	o/ByteVector:size	[B
    //   324: astore 6
    //   326: aload_0
    //   327: getfield 34	o/ByteVector:size	[B
    //   330: arraylength
    //   331: istore_2
    //   332: aload 6
    //   334: aload_1
    //   335: iload_2
    //   336: invokestatic 216	o/Method:equals	([B[BI)Z
    //   339: istore 5
    //   341: iload 5
    //   343: ifeq +38 -> 381
    //   346: aload_1
    //   347: bipush 16
    //   349: invokestatic 219	o/Method:get	([BI)I
    //   352: istore_2
    //   353: iload_2
    //   354: iconst_1
    //   355: if_icmpeq +23 -> 378
    //   358: iload_2
    //   359: bipush 10
    //   361: if_icmpne +5 -> 366
    //   364: iconst_1
    //   365: ireturn
    //   366: new 193	o/ObjectMap
    //   369: dup
    //   370: bipush 11
    //   372: invokespecial 196	o/ObjectMap:<init>	(I)V
    //   375: astore_1
    //   376: aload_1
    //   377: athrow
    //   378: goto +25 -> 403
    //   381: new 193	o/ObjectMap
    //   384: dup
    //   385: bipush 12
    //   387: invokespecial 196	o/ObjectMap:<init>	(I)V
    //   390: astore_1
    //   391: aload_1
    //   392: athrow
    //   393: new 193	o/ObjectMap
    //   396: dup
    //   397: bipush 13
    //   399: invokespecial 196	o/ObjectMap:<init>	(I)V
    //   402: athrow
    //   403: iconst_0
    //   404: ireturn
    //   405: astore_1
    //   406: goto -13 -> 393
    //   409: astore_1
    //   410: goto -136 -> 274
    //   413: astore_1
    //   414: goto -21 -> 393
    //   417: astore_1
    //   418: goto -25 -> 393
    //   421: astore_1
    //   422: goto -29 -> 393
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	425	0	this	ByteVector
    //   0	425	1	paramArrayOfByte	byte[]
    //   157	205	2	i	int
    //   117	199	3	l	long
    //   339	3	5	bool	boolean
    //   22	311	6	localObject1	Object
    //   68	199	7	localObject2	Object
    //   145	60	8	localObject3	Object
    //   152	7	9	localMessageDigest	MessageDigest
    // Exception table:
    //   from	to	target	type
    //   33	70	27	java/lang/Throwable
    //   118	128	405	o/ActivatingIterator
    //   128	147	405	o/ActivatingIterator
    //   158	167	405	o/ActivatingIterator
    //   178	187	405	o/ActivatingIterator
    //   204	213	405	o/ActivatingIterator
    //   226	233	405	o/ActivatingIterator
    //   237	247	405	o/ActivatingIterator
    //   253	264	409	java/lang/Exception
    //   253	264	413	o/ActivatingIterator
    //   274	282	417	o/ActivatingIterator
    //   292	302	417	o/ActivatingIterator
    //   312	320	417	o/ActivatingIterator
    //   332	341	417	o/ActivatingIterator
    //   346	353	417	o/ActivatingIterator
    //   366	376	421	o/ActivatingIterator
    //   381	391	421	o/ActivatingIterator
  }
  
  private byte[] add(int paramInt, byte[] paramArrayOfByte)
  {
    Object localObject = new byte[paramArrayOfByte.length + 4];
    byte[] arrayOfByte = new byte[4];
    System04this$0.putInt(paramInt);
    java.lang.System.arraycopy(arrayOfByte, 0, localObject, 0, 4);
    java.lang.System.arraycopy(paramArrayOfByte, 0, localObject, 4, paramArrayOfByte.length);
    paramArrayOfByte = this$0;
    try
    {
      paramArrayOfByte = paramArrayOfByte.get((byte[])localObject);
      localObject = delegate;
      paramArrayOfByte = ((Resource)localObject).process(paramArrayOfByte);
      if (paramArrayOfByte.length < 20) {
        throw new ActivatingIterator();
      }
      localObject = this$0;
      paramArrayOfByte = ((UnboundedFifoByteBuffer)localObject).add(paramArrayOfByte);
      return paramArrayOfByte;
    }
    catch (ActivatingIterator paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new Converters(9);
  }
  
  private boolean get(byte[] paramArrayOfByte)
  {
    int i = Method.get(paramArrayOfByte, 0);
    Object localObject1;
    if (i == 1)
    {
      paramArrayOfByte = new System(paramArrayOfByte, 4, paramArrayOfByte.length - 4);
      localObject1 = this$0;
    }
    try
    {
      ((ByteBuffer)localObject1).getInt();
      localObject1 = this$0;
      i = ((ByteBuffer)localObject1).getInt();
      localObject1 = Logger.get(paramArrayOfByte);
      Object localObject2 = this$0;
      int j = ((ByteBuffer)localObject2).getInt();
      localObject2 = new byte[j];
      paramArrayOfByte = this$0;
      paramArrayOfByte.get((byte[])localObject2);
      Engine.execute((String)localObject1, (byte[])localObject2);
      paramArrayOfByte = params;
      paramArrayOfByte.addElement(localObject1);
      if (i == 0)
      {
        paramArrayOfByte = params;
        Engine.execute(paramArrayOfByte);
      }
      return i > 0;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new ObjectMap();
    if (i == 2) {
      return false;
    }
    throw new ObjectMap();
  }
  
  private static void load(byte[] paramArrayOfByte)
  {
    int i = Method.get(paramArrayOfByte, 0);
    System localSystem;
    if (i == 1)
    {
      localSystem = new System(paramArrayOfByte, 4, paramArrayOfByte.length - 4);
      paramArrayOfByte = this$0;
    }
    try
    {
      paramArrayOfByte.getInt();
      paramArrayOfByte = this$0;
      int k = paramArrayOfByte.getInt();
      i = 0;
      while (i < k)
      {
        Object localObject1 = Cache.get(Logger.get(localSystem));
        boolean bool = ((String)localObject1).startsWith("//");
        paramArrayOfByte = (byte[])localObject1;
        if (bool) {
          paramArrayOfByte = ((String)localObject1).substring(1);
        }
        localObject1 = new File(paramArrayOfByte);
        Object localObject2 = file;
        bool = ((java.io.File)localObject2).exists();
        if (bool)
        {
          Engine.load((File)localObject1, paramArrayOfByte);
        }
        else
        {
          paramArrayOfByte = file;
          paramArrayOfByte = paramArrayOfByte.list();
          int m = paramArrayOfByte.length;
          int j = 0;
          while (j < m)
          {
            localObject1 = paramArrayOfByte[j];
            localObject2 = new File((String)localObject1);
            java.io.File localFile = file;
            bool = localFile.isDirectory();
            if (!bool) {
              Engine.load((File)localObject2, (String)localObject1);
            }
            j += 1;
          }
        }
        i += 1;
      }
      return;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new ObjectMap();
    if (i != 2) {
      throw new ObjectMap();
    }
  }
  
  private static void parse(byte[] paramArrayOfByte)
  {
    int i = Method.get(paramArrayOfByte, 0);
    System localSystem;
    if (i == 1)
    {
      localSystem = new System(paramArrayOfByte, 4, paramArrayOfByte.length - 4);
      paramArrayOfByte = this$0;
    }
    try
    {
      paramArrayOfByte.getInt();
      paramArrayOfByte = this$0;
      j = paramArrayOfByte.getInt();
      i = 0;
    }
    catch (IOException paramArrayOfByte)
    {
      try
      {
        for (;;)
        {
          int j;
          int k;
          Object localObject1;
          Type localType;
          boolean bool;
          Object localObject2;
          long l;
          int m;
          ((LinkedBlockingQueue)localObject1).put(paramArrayOfByte);
          try
          {
            Utils.sleep(2000);
            i += 1;
          }
          catch (IOException paramArrayOfByte)
          {
            for (;;) {}
          }
        }
        return;
        for (;;)
        {
          throw new ObjectMap();
          if (i == 2) {
            break;
          }
          throw new ObjectMap();
          paramArrayOfByte = paramArrayOfByte;
        }
      }
      catch (Exception paramArrayOfByte)
      {
        for (;;) {}
      }
      catch (IOException paramArrayOfByte)
      {
        for (;;) {}
      }
    }
    if (i < j)
    {
      paramArrayOfByte = this$0;
      k = paramArrayOfByte.getInt();
      localObject1 = Cache.get(Logger.get(localSystem));
      paramArrayOfByte = (byte[])localObject1;
      localType = new Type(60833);
      bool = ((String)localObject1).equals("/");
      if (bool)
      {
        paramArrayOfByte = new byte[30];
        localObject1 = new System(paramArrayOfByte);
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putInt(2010031501);
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putInt(2);
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putInt(1);
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putLong(0L);
        localObject2 = new Date();
        localObject2 = new Connection((Date)localObject2);
        l = type;
        localObject2 = this$0;
        ((ByteBuffer)localObject2).putLong(l);
        localObject2 = Logger.get("/", false);
        localObject1 = this$0;
        ((ByteBuffer)localObject1).put((byte[])localObject2);
        localType.get(paramArrayOfByte);
        Engine.load(localType, "/", k);
      }
      else
      {
        bool = ((String)localObject1).startsWith("//");
        if (bool) {
          paramArrayOfByte = ((String)localObject1).substring(1, ((String)localObject1).length());
        }
        bool = paramArrayOfByte.endsWith("/*");
        localObject1 = paramArrayOfByte;
        if (bool)
        {
          m = paramArrayOfByte.length();
          localObject1 = paramArrayOfByte.substring(0, m - 2);
        }
        bool = ((String)localObject1).startsWith("/");
        if (bool) {
          Engine.load(localType, (String)localObject1, k);
        }
      }
      l = name;
      paramArrayOfByte = new Field(l);
      type = 5;
      if (next == null)
      {
        localObject1 = Request.get();
        next = ((Request)localObject1);
        if (next == null) {}
      }
      else
      {
        localObject1 = next.this$0;
      }
    }
  }
  
  private void read(String paramString)
  {
    SmbFile.close();
    Vector localVector = SmbFile.list(paramString);
    int m = localVector.size();
    int i = 0;
    while (i < m)
    {
      String str = (String)localVector.elementAt(i);
      String[] arrayOfString = SmbFile.read(paramString, str);
      int j = arrayOfString.length;
      Object localObject = new byte[12];
      byte[] arrayOfByte1 = new byte[4];
      System04this$0.putInt(j);
      java.lang.System.arraycopy(arrayOfByte1, 0, localObject, 0, 4);
      j = Method.get(add(11, (byte[])localObject), 0);
      if ((j != 1) && (j != 2)) {
        throw new ObjectMap();
      }
      int n = arrayOfString.length;
      j = 0;
      while (j < n)
      {
        localObject = arrayOfString[j];
        localObject = new File(paramString + str + (String)localObject);
        if (file.exists()) {
          if (file.length() > 65536L)
          {
            read((File)localObject);
          }
          else
          {
            arrayOfByte1 = ((File)localObject).next(0);
            if (arrayOfByte1 != null)
            {
              byte[] arrayOfByte2 = new byte[arrayOfByte1.length + 4];
              int k = arrayOfByte1.length;
              byte[] arrayOfByte3 = new byte[4];
              System04this$0.putInt(k);
              java.lang.System.arraycopy(arrayOfByte3, 0, arrayOfByte2, 0, 4);
              java.lang.System.arraycopy(arrayOfByte1, 0, arrayOfByte2, 4, arrayOfByte1.length);
              k = Method.get(add(9, arrayOfByte2), 0);
              if (k == 1) {
                k = 1;
              } else if (k == 2) {
                k = 0;
              } else {
                throw new ObjectMap();
              }
              if (k != 0)
              {
                SmbFile.close();
                SmbFile.close(header);
              }
            }
          }
        }
        j += 1;
      }
      new java.io.File(paramString + str).delete();
      i += 1;
    }
  }
  
  private static void read(String paramString, Date paramDate, int paramInt)
  {
    SmbFile.close();
    Vector localVector = SmbFile.list(paramString);
    int k = localVector.size();
    int i = 0;
    while (i < k)
    {
      String str = (String)localVector.elementAt(i);
      String[] arrayOfString = SmbFile.read(paramString, str);
      int m = arrayOfString.length;
      int j = 0;
      while (j < m)
      {
        Object localObject = arrayOfString[j];
        localObject = new File(paramString + str + (String)localObject);
        if (file.exists()) {
          if ((paramInt > 0) && (file.length() > paramInt)) {
            file.delete();
          } else if ((paramDate != null) && (file.lastModified() < paramDate.getTime())) {
            file.delete();
          }
        }
        j += 1;
      }
      i += 1;
    }
  }
  
  private boolean read(File paramFile)
  {
    int n = (int)file.length();
    byte[] arrayOfByte2 = new byte[20];
    byte[] arrayOfByte1 = header.getBytes();
    Object localObject = new DescriptorMatcher();
    this$0.update(arrayOfByte1, 0, arrayOfByte1.length);
    arrayOfByte1 = this$0.digest();
    java.lang.System.arraycopy(arrayOfByte1, 0, arrayOfByte2, 0, 4);
    localObject = new byte[4];
    System04this$0.putInt(n);
    java.lang.System.arraycopy(localObject, 0, arrayOfByte2, 12, 4);
    arrayOfByte2 = add(16, arrayOfByte2);
    int i = Method.get(arrayOfByte2, 0);
    if (i == 1) {
      i = 1;
    } else if (i == 2) {
      i = 0;
    } else {
      throw new ObjectMap();
    }
    if (i != 0)
    {
      if (Method.get(arrayOfByte2, 4) == 4) {
        i = Method.get(arrayOfByte2, 8);
      } else {
        i = 0;
      }
    }
    else {
      i = -1;
    }
    int j = 0;
    int m = i;
    int k;
    do
    {
      k = j;
      if (m >= n) {
        break;
      }
      arrayOfByte2 = paramFile.read(m, 65536);
      localObject = new byte[arrayOfByte2.length + 16];
      java.lang.System.arraycopy(arrayOfByte1, 0, localObject, 0, 4);
      byte[] arrayOfByte3 = new byte[4];
      System04this$0.putInt(m);
      java.lang.System.arraycopy(arrayOfByte3, 0, localObject, 4, 4);
      i = arrayOfByte2.length;
      arrayOfByte3 = new byte[4];
      System04this$0.putInt(i);
      java.lang.System.arraycopy(arrayOfByte3, 0, localObject, 8, 4);
      arrayOfByte3 = new byte[4];
      System04this$0.putInt(n);
      java.lang.System.arraycopy(arrayOfByte3, 0, localObject, 12, 4);
      java.lang.System.arraycopy(arrayOfByte2, 0, localObject, 16, arrayOfByte2.length);
      arrayOfByte2 = add(16, (byte[])localObject);
      i = Method.get(arrayOfByte2, 0);
      if (i == 1) {
        i = 1;
      } else if (i == 2) {
        i = 0;
      } else {
        throw new ObjectMap();
      }
      if (i != 0)
      {
        if (Method.get(arrayOfByte2, 4) == 4) {
          i = Method.get(arrayOfByte2, 8);
        } else {
          i = 0;
        }
      }
      else {
        i = -1;
      }
      k = j;
      if (i == n) {
        k = 1;
      }
      m = i;
      j = k;
    } while (i > 0);
    if (k != 0)
    {
      SmbFile.close();
      SmbFile.close(header);
      return true;
    }
    return false;
  }
  
  private static boolean[] read(byte[] paramArrayOfByte)
  {
    boolean[] arrayOfBoolean = new boolean[28];
    int i = Method.get(paramArrayOfByte, 0);
    ByteBuffer localByteBuffer;
    if (i == 1)
    {
      paramArrayOfByte = new System(paramArrayOfByte, 4, paramArrayOfByte.length - 4);
      localByteBuffer = this$0;
    }
    try
    {
      localByteBuffer.getInt();
      localByteBuffer = this$0;
      long l1 = localByteBuffer.getLong();
      long l2 = new Date().getTime();
      i = (int)(l1 - l2 / 1000L);
      JSONArray.get();
      JSONArray.movementMethod = i;
      localByteBuffer = this$0;
      int j = localByteBuffer.getInt();
      i = 0;
      while (i < j)
      {
        localByteBuffer = this$0;
        int k = localByteBuffer.getInt();
        if (k < 28) {
          arrayOfBoolean[k] = true;
        }
        i += 1;
      }
      return arrayOfBoolean;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new ObjectMap();
    if (i != 2) {
      throw new ObjectMap();
    }
    return arrayOfBoolean;
  }
  
  private static void run(byte[] paramArrayOfByte)
  {
    int i = Method.get(paramArrayOfByte, 0);
    Object localObject1;
    if (i == 1)
    {
      paramArrayOfByte = new System(paramArrayOfByte, 4, paramArrayOfByte.length - 4);
      localObject1 = this$0;
    }
    try
    {
      ((ByteBuffer)localObject1).getInt();
      localObject1 = this$0;
      j = ((ByteBuffer)localObject1).getInt();
      i = 0;
    }
    catch (IOException paramArrayOfByte)
    {
      try
      {
        for (;;)
        {
          int j;
          Object localObject2;
          ((LinkedBlockingQueue)localObject2).put(localObject1);
          i += 1;
        }
        return;
        for (;;)
        {
          throw new ObjectMap();
          if (i == 2) {
            break;
          }
          throw new ObjectMap();
          paramArrayOfByte = paramArrayOfByte;
        }
      }
      catch (Exception localException)
      {
        for (;;) {}
      }
      catch (IOException paramArrayOfByte)
      {
        for (;;) {}
      }
    }
    if (i < j)
    {
      localObject2 = QQueryBase.3.run(Cache.get(Logger.get(paramArrayOfByte)));
      localObject1 = Logger.get(((Address)localObject2).parse(), true);
      localObject2 = host;
      localObject2 = Logger.get((String)localObject2);
      localObject1 = new Field(49345, (byte[])localObject2, (byte[])localObject1);
      localObject2 = Request.get();
      localObject2 = this$0;
    }
  }
  
  private void write(boolean paramBoolean)
  {
    if (paramBoolean) {
      for (paramBoolean = true; paramBoolean; paramBoolean = write(add(13, new byte[0]))) {}
    }
  }
  
  private static boolean write(byte[] paramArrayOfByte)
  {
    int i = Method.get(paramArrayOfByte, 0);
    Object localObject1;
    if (i == 1)
    {
      localObject1 = new System(paramArrayOfByte, 4, paramArrayOfByte.length - 4);
      paramArrayOfByte = this$0;
    }
    try
    {
      paramArrayOfByte.getInt();
      paramArrayOfByte = this$0;
      i = paramArrayOfByte.getInt();
      paramArrayOfByte = Logger.get((System)localObject1);
      Object localObject2 = this$0;
      int j = ((ByteBuffer)localObject2).getInt();
      localObject2 = new byte[j];
      localObject1 = this$0;
      ((ByteBuffer)localObject1).get((byte[])localObject2);
      Engine.execute(paramArrayOfByte, (byte[])localObject2);
      localObject1 = Engine.TAG;
      boolean bool = paramArrayOfByte.equals(localObject1);
      if (bool)
      {
        localObject1 = new Vector();
        ((Vector)localObject1).add(paramArrayOfByte);
        Engine.execute((Vector)localObject1);
      }
      return i > 0;
    }
    catch (IOException paramArrayOfByte)
    {
      for (;;) {}
    }
    throw new ObjectMap();
    if (i == 2) {
      return false;
    }
    throw new ObjectMap();
  }
  
  /* Error */
  public final boolean read()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 184	o/Engine:delegate	Lo/Resource;
    //   4: astore 8
    //   6: aload 8
    //   8: invokevirtual 481	o/Resource:setupViews	()V
    //   11: aload_0
    //   12: invokespecial 483	o/ByteVector:add	()Z
    //   15: istore 4
    //   17: iload 4
    //   19: putstatic 487	o/JSONArray:status	Z
    //   22: iload 4
    //   24: ifeq +12 -> 36
    //   27: aload_0
    //   28: getfield 184	o/Engine:delegate	Lo/Resource;
    //   31: invokevirtual 490	o/Resource:cancel	()V
    //   34: iconst_1
    //   35: ireturn
    //   36: invokestatic 495	o/Util:read	()Lo/Util;
    //   39: pop
    //   40: invokestatic 497	o/Util:get	()Ljava/lang/String;
    //   43: invokestatic 94	o/Logger:get	(Ljava/lang/String;)[B
    //   46: astore 12
    //   48: invokestatic 500	o/Util:initialize	()Ljava/lang/String;
    //   51: invokestatic 94	o/Logger:get	(Ljava/lang/String;)[B
    //   54: astore 10
    //   56: invokestatic 502	o/Util:getString	()Ljava/lang/String;
    //   59: invokestatic 94	o/Logger:get	(Ljava/lang/String;)[B
    //   62: astore 8
    //   64: aload 12
    //   66: arraylength
    //   67: istore_1
    //   68: aload 10
    //   70: arraylength
    //   71: istore_2
    //   72: aload 8
    //   74: arraylength
    //   75: istore_3
    //   76: iload_1
    //   77: iconst_4
    //   78: iadd
    //   79: iload_2
    //   80: iadd
    //   81: iload_3
    //   82: iadd
    //   83: newarray byte
    //   85: astore 9
    //   87: aload 9
    //   89: arraylength
    //   90: istore_1
    //   91: new 128	o/System
    //   94: dup
    //   95: aload 9
    //   97: iconst_0
    //   98: iload_1
    //   99: invokespecial 131	o/System:<init>	([BII)V
    //   102: astore 11
    //   104: invokestatic 505	o/Util:putByte	()[B
    //   107: astore 13
    //   109: aload 11
    //   111: getfield 134	o/System:this$0	Ljava/nio/ByteBuffer;
    //   114: astore 14
    //   116: aload 14
    //   118: aload 13
    //   120: invokevirtual 140	java/nio/ByteBuffer:put	([B)Ljava/nio/ByteBuffer;
    //   123: pop
    //   124: aload 11
    //   126: getfield 134	o/System:this$0	Ljava/nio/ByteBuffer;
    //   129: astore 13
    //   131: aload 13
    //   133: aload 12
    //   135: invokevirtual 140	java/nio/ByteBuffer:put	([B)Ljava/nio/ByteBuffer;
    //   138: pop
    //   139: aload 11
    //   141: getfield 134	o/System:this$0	Ljava/nio/ByteBuffer;
    //   144: astore 12
    //   146: aload 12
    //   148: aload 10
    //   150: invokevirtual 140	java/nio/ByteBuffer:put	([B)Ljava/nio/ByteBuffer;
    //   153: pop
    //   154: aload 11
    //   156: getfield 134	o/System:this$0	Ljava/nio/ByteBuffer;
    //   159: astore 10
    //   161: aload 10
    //   163: aload 8
    //   165: invokevirtual 140	java/nio/ByteBuffer:put	([B)Ljava/nio/ByteBuffer;
    //   168: pop
    //   169: aload_0
    //   170: bipush 15
    //   172: aload 9
    //   174: invokespecial 97	o/ByteVector:add	(I[B)[B
    //   177: invokestatic 507	o/ByteVector:read	([B)[Z
    //   180: astore 9
    //   182: aload 9
    //   184: bipush 26
    //   186: baload
    //   187: ifeq +123 -> 310
    //   190: aload_0
    //   191: bipush 26
    //   193: iconst_0
    //   194: newarray byte
    //   196: invokespecial 97	o/ByteVector:add	(I[B)[B
    //   199: astore 8
    //   201: aload 8
    //   203: iconst_0
    //   204: invokestatic 219	o/Method:get	([BI)I
    //   207: istore_1
    //   208: iload_1
    //   209: iconst_1
    //   210: if_icmpne +100 -> 310
    //   213: aload 8
    //   215: iconst_4
    //   216: invokestatic 219	o/Method:get	([BI)I
    //   219: istore_1
    //   220: iload_1
    //   221: bipush 12
    //   223: if_icmplt +87 -> 310
    //   226: aload 8
    //   228: invokestatic 511	o/Method:decode	([B)J
    //   231: lstore 6
    //   233: aload 8
    //   235: bipush 16
    //   237: invokestatic 219	o/Method:get	([BI)I
    //   240: istore_1
    //   241: aconst_null
    //   242: astore 8
    //   244: lload 6
    //   246: lconst_0
    //   247: lcmp
    //   248: ifle +18 -> 266
    //   251: new 311	java/util/Date
    //   254: dup
    //   255: ldc2_w 442
    //   258: lload 6
    //   260: lmul
    //   261: invokespecial 512	java/util/Date:<init>	(J)V
    //   264: astore 8
    //   266: new 393	java/lang/StringBuilder
    //   269: dup
    //   270: invokespecial 394	java/lang/StringBuilder:<init>	()V
    //   273: astore 10
    //   275: getstatic 514	o/Logger:name	Ljava/lang/String;
    //   278: astore 11
    //   280: aload 10
    //   282: aload 11
    //   284: invokevirtual 398	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   287: astore 10
    //   289: getstatic 517	o/Logger:value	Ljava/lang/String;
    //   292: astore 11
    //   294: aload 10
    //   296: aload 11
    //   298: invokevirtual 398	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   301: invokevirtual 402	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   304: aload 8
    //   306: iload_1
    //   307: invokestatic 519	o/ByteVector:read	(Ljava/lang/String;Ljava/util/Date;I)V
    //   310: aload 9
    //   312: bipush 7
    //   314: baload
    //   315: ifeq +248 -> 563
    //   318: aload_0
    //   319: bipush 7
    //   321: iconst_0
    //   322: newarray byte
    //   324: invokespecial 97	o/ByteVector:add	(I[B)[B
    //   327: astore 8
    //   329: aload 8
    //   331: iconst_0
    //   332: invokestatic 219	o/Method:get	([BI)I
    //   335: istore_1
    //   336: iconst_0
    //   337: istore 4
    //   339: iload_1
    //   340: iconst_1
    //   341: if_icmpne +114 -> 455
    //   344: aload 8
    //   346: iconst_4
    //   347: invokestatic 219	o/Method:get	([BI)I
    //   350: istore_1
    //   351: iload_1
    //   352: ifle +88 -> 440
    //   355: aload 8
    //   357: invokestatic 521	o/Engine:execute	([B)Z
    //   360: istore 5
    //   362: iload 5
    //   364: istore 4
    //   366: iload 5
    //   368: ifeq +72 -> 440
    //   371: goto +11 -> 382
    //   374: astore 8
    //   376: aload 8
    //   378: invokevirtual 43	java/lang/Throwable:getCause	()Ljava/lang/Throwable;
    //   381: athrow
    //   382: ldc_w 523
    //   385: invokestatic 51	o/Log:get	(Ljava/lang/String;)Ljava/lang/Class;
    //   388: ldc_w 525
    //   391: aconst_null
    //   392: invokevirtual 61	java/lang/Class:getMethod	(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
    //   395: aconst_null
    //   396: aconst_null
    //   397: invokevirtual 71	java/lang/reflect/Method:invoke	(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    //   400: astore 8
    //   402: goto +11 -> 413
    //   405: astore 8
    //   407: aload 8
    //   409: invokevirtual 43	java/lang/Throwable:getCause	()Ljava/lang/Throwable;
    //   412: athrow
    //   413: ldc_w 523
    //   416: invokestatic 51	o/Log:get	(Ljava/lang/String;)Ljava/lang/Class;
    //   419: ldc_w 527
    //   422: aconst_null
    //   423: invokevirtual 61	java/lang/Class:getMethod	(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
    //   426: aload 8
    //   428: aconst_null
    //   429: invokevirtual 71	java/lang/reflect/Method:invoke	(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    //   432: checkcast 529	java/lang/Boolean
    //   435: invokevirtual 532	java/lang/Boolean:booleanValue	()Z
    //   438: istore 4
    //   440: iload 4
    //   442: ifeq +8 -> 450
    //   445: iconst_1
    //   446: istore_1
    //   447: goto +30 -> 477
    //   450: iconst_0
    //   451: istore_1
    //   452: goto +25 -> 477
    //   455: iload_1
    //   456: iconst_2
    //   457: if_icmpne +8 -> 465
    //   460: iconst_2
    //   461: istore_1
    //   462: goto +15 -> 477
    //   465: new 193	o/ObjectMap
    //   468: dup
    //   469: invokespecial 253	o/ObjectMap:<init>	()V
    //   472: astore 8
    //   474: aload 8
    //   476: athrow
    //   477: iload_1
    //   478: iconst_2
    //   479: if_icmpeq +84 -> 563
    //   482: iload_1
    //   483: iconst_1
    //   484: if_icmpne +38 -> 522
    //   487: iconst_4
    //   488: newarray byte
    //   490: astore 8
    //   492: new 128	o/System
    //   495: dup
    //   496: aload 8
    //   498: iconst_0
    //   499: iconst_4
    //   500: invokespecial 131	o/System:<init>	([BII)V
    //   503: astore 10
    //   505: aload 10
    //   507: getfield 134	o/System:this$0	Ljava/nio/ByteBuffer;
    //   510: astore 10
    //   512: aload 10
    //   514: iconst_1
    //   515: invokevirtual 223	java/nio/ByteBuffer:putInt	(I)Ljava/nio/ByteBuffer;
    //   518: pop
    //   519: goto +35 -> 554
    //   522: iconst_4
    //   523: newarray byte
    //   525: astore 8
    //   527: new 128	o/System
    //   530: dup
    //   531: aload 8
    //   533: iconst_0
    //   534: iconst_4
    //   535: invokespecial 131	o/System:<init>	([BII)V
    //   538: astore 10
    //   540: aload 10
    //   542: getfield 134	o/System:this$0	Ljava/nio/ByteBuffer;
    //   545: astore 10
    //   547: aload 10
    //   549: iconst_2
    //   550: invokevirtual 223	java/nio/ByteBuffer:putInt	(I)Ljava/nio/ByteBuffer;
    //   553: pop
    //   554: aload_0
    //   555: bipush 7
    //   557: aload 8
    //   559: invokespecial 97	o/ByteVector:add	(I[B)[B
    //   562: pop
    //   563: aload 9
    //   565: bipush 12
    //   567: baload
    //   568: ifeq +15 -> 583
    //   571: aload_0
    //   572: bipush 12
    //   574: iconst_0
    //   575: newarray byte
    //   577: invokespecial 97	o/ByteVector:add	(I[B)[B
    //   580: invokestatic 534	o/ByteVector:load	([B)V
    //   583: aload 9
    //   585: bipush 13
    //   587: baload
    //   588: istore 4
    //   590: aload_0
    //   591: iload 4
    //   593: invokespecial 536	o/ByteVector:write	(Z)V
    //   596: aload 9
    //   598: bipush 22
    //   600: baload
    //   601: istore 4
    //   603: aload_0
    //   604: iload 4
    //   606: invokespecial 538	o/ByteVector:add	(Z)V
    //   609: aload 9
    //   611: bipush 25
    //   613: baload
    //   614: ifeq +15 -> 629
    //   617: aload_0
    //   618: bipush 25
    //   620: iconst_0
    //   621: newarray byte
    //   623: invokespecial 97	o/ByteVector:add	(I[B)[B
    //   626: invokestatic 540	o/ByteVector:parse	([B)V
    //   629: aload 9
    //   631: bipush 27
    //   633: baload
    //   634: ifeq +15 -> 649
    //   637: aload_0
    //   638: bipush 27
    //   640: iconst_0
    //   641: newarray byte
    //   643: invokespecial 97	o/ByteVector:add	(I[B)[B
    //   646: invokestatic 542	o/ByteVector:run	([B)V
    //   649: new 393	java/lang/StringBuilder
    //   652: dup
    //   653: invokespecial 394	java/lang/StringBuilder:<init>	()V
    //   656: astore 8
    //   658: getstatic 514	o/Logger:name	Ljava/lang/String;
    //   661: astore 9
    //   663: aload 8
    //   665: aload 9
    //   667: invokevirtual 398	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   670: astore 8
    //   672: getstatic 517	o/Logger:value	Ljava/lang/String;
    //   675: astore 9
    //   677: aload_0
    //   678: aload 8
    //   680: aload 9
    //   682: invokevirtual 398	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   685: invokevirtual 402	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   688: invokespecial 544	o/ByteVector:read	(Ljava/lang/String;)V
    //   691: aload_0
    //   692: iconst_3
    //   693: iconst_0
    //   694: newarray byte
    //   696: invokespecial 97	o/ByteVector:add	(I[B)[B
    //   699: iconst_0
    //   700: invokestatic 219	o/Method:get	([BI)I
    //   703: istore_1
    //   704: iload_1
    //   705: iconst_1
    //   706: if_icmpeq +20 -> 726
    //   709: iload_1
    //   710: iconst_2
    //   711: if_icmpeq +15 -> 726
    //   714: new 193	o/ObjectMap
    //   717: dup
    //   718: invokespecial 253	o/ObjectMap:<init>	()V
    //   721: astore 8
    //   723: aload 8
    //   725: athrow
    //   726: aload_0
    //   727: getfield 184	o/Engine:delegate	Lo/Resource;
    //   730: invokevirtual 490	o/Resource:cancel	()V
    //   733: iconst_1
    //   734: ireturn
    //   735: aload_0
    //   736: getfield 184	o/Engine:delegate	Lo/Resource;
    //   739: invokevirtual 490	o/Resource:cancel	()V
    //   742: iconst_0
    //   743: ireturn
    //   744: aload_0
    //   745: getfield 184	o/Engine:delegate	Lo/Resource;
    //   748: invokevirtual 490	o/Resource:cancel	()V
    //   751: iconst_0
    //   752: ireturn
    //   753: aload_0
    //   754: getfield 184	o/Engine:delegate	Lo/Resource;
    //   757: invokevirtual 490	o/Resource:cancel	()V
    //   760: iconst_0
    //   761: ireturn
    //   762: astore 8
    //   764: aload_0
    //   765: getfield 184	o/Engine:delegate	Lo/Resource;
    //   768: invokevirtual 490	o/Resource:cancel	()V
    //   771: aload 8
    //   773: athrow
    //   774: astore 8
    //   776: goto -41 -> 735
    //   779: astore 8
    //   781: goto -37 -> 744
    //   784: astore 8
    //   786: goto -33 -> 753
    //   789: astore 8
    //   791: goto -56 -> 735
    //   794: astore 8
    //   796: goto -52 -> 744
    //   799: astore 8
    //   801: goto -48 -> 753
    //   804: astore 8
    //   806: goto -71 -> 735
    //   809: astore 8
    //   811: goto -67 -> 744
    //   814: astore 8
    //   816: goto -63 -> 753
    //   819: astore 8
    //   821: goto -86 -> 735
    //   824: astore 8
    //   826: goto -82 -> 744
    //   829: astore 8
    //   831: goto -78 -> 753
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	834	0	this	ByteVector
    //   67	645	1	i	int
    //   71	10	2	j	int
    //   75	8	3	k	int
    //   15	426	4	bool1	boolean
    //   588	4	4	m	int
    //   601	4	4	n	int
    //   360	7	5	bool2	boolean
    //   231	28	6	l	long
    //   4	352	8	localObject1	Object
    //   374	3	8	localThrowable1	Throwable
    //   400	1	8	localObject2	Object
    //   405	22	8	localThrowable2	Throwable
    //   472	252	8	localObject3	Object
    //   762	10	8	localThrowable3	Throwable
    //   774	1	8	localConverters1	Converters
    //   779	1	8	localObjectMap1	ObjectMap
    //   784	1	8	localLigneInexistanteException1	LigneInexistanteException
    //   789	1	8	localConverters2	Converters
    //   794	1	8	localObjectMap2	ObjectMap
    //   799	1	8	localLigneInexistanteException2	LigneInexistanteException
    //   804	1	8	localConverters3	Converters
    //   809	1	8	localObjectMap3	ObjectMap
    //   814	1	8	localLigneInexistanteException3	LigneInexistanteException
    //   819	1	8	localConverters4	Converters
    //   824	1	8	localObjectMap4	ObjectMap
    //   829	1	8	localLigneInexistanteException4	LigneInexistanteException
    //   85	596	9	localObject4	Object
    //   54	494	10	localObject5	Object
    //   102	195	11	localObject6	Object
    //   46	101	12	localObject7	Object
    //   107	25	13	localObject8	Object
    //   114	3	14	localByteBuffer	ByteBuffer
    // Exception table:
    //   from	to	target	type
    //   382	402	374	java/lang/Throwable
    //   413	440	405	java/lang/Throwable
    //   0	6	762	java/lang/Throwable
    //   6	17	762	java/lang/Throwable
    //   17	22	762	java/lang/Throwable
    //   36	64	762	java/lang/Throwable
    //   64	68	762	java/lang/Throwable
    //   68	72	762	java/lang/Throwable
    //   72	76	762	java/lang/Throwable
    //   76	91	762	java/lang/Throwable
    //   91	109	762	java/lang/Throwable
    //   109	116	762	java/lang/Throwable
    //   116	124	762	java/lang/Throwable
    //   124	131	762	java/lang/Throwable
    //   131	139	762	java/lang/Throwable
    //   139	146	762	java/lang/Throwable
    //   146	154	762	java/lang/Throwable
    //   154	161	762	java/lang/Throwable
    //   161	182	762	java/lang/Throwable
    //   190	208	762	java/lang/Throwable
    //   213	220	762	java/lang/Throwable
    //   226	241	762	java/lang/Throwable
    //   251	266	762	java/lang/Throwable
    //   266	275	762	java/lang/Throwable
    //   275	280	762	java/lang/Throwable
    //   280	289	762	java/lang/Throwable
    //   289	294	762	java/lang/Throwable
    //   294	310	762	java/lang/Throwable
    //   318	336	762	java/lang/Throwable
    //   344	351	762	java/lang/Throwable
    //   355	362	762	java/lang/Throwable
    //   376	382	762	java/lang/Throwable
    //   407	413	762	java/lang/Throwable
    //   465	474	762	java/lang/Throwable
    //   474	477	762	java/lang/Throwable
    //   487	492	762	java/lang/Throwable
    //   492	505	762	java/lang/Throwable
    //   512	519	762	java/lang/Throwable
    //   522	527	762	java/lang/Throwable
    //   527	540	762	java/lang/Throwable
    //   547	554	762	java/lang/Throwable
    //   554	563	762	java/lang/Throwable
    //   571	583	762	java/lang/Throwable
    //   590	596	762	java/lang/Throwable
    //   603	609	762	java/lang/Throwable
    //   617	629	762	java/lang/Throwable
    //   637	649	762	java/lang/Throwable
    //   649	658	762	java/lang/Throwable
    //   658	663	762	java/lang/Throwable
    //   663	672	762	java/lang/Throwable
    //   672	677	762	java/lang/Throwable
    //   677	691	762	java/lang/Throwable
    //   691	704	762	java/lang/Throwable
    //   714	723	762	java/lang/Throwable
    //   723	726	762	java/lang/Throwable
    //   6	17	774	o/Converters
    //   6	17	779	o/ObjectMap
    //   6	17	784	o/LigneInexistanteException
    //   36	64	789	o/Converters
    //   91	109	789	o/Converters
    //   116	124	789	o/Converters
    //   131	139	789	o/Converters
    //   146	154	789	o/Converters
    //   161	182	789	o/Converters
    //   190	208	789	o/Converters
    //   213	220	789	o/Converters
    //   226	241	789	o/Converters
    //   251	266	789	o/Converters
    //   266	275	789	o/Converters
    //   280	289	789	o/Converters
    //   294	310	789	o/Converters
    //   318	336	789	o/Converters
    //   344	351	789	o/Converters
    //   355	362	789	o/Converters
    //   376	382	789	o/Converters
    //   36	64	794	o/ObjectMap
    //   91	109	794	o/ObjectMap
    //   116	124	794	o/ObjectMap
    //   131	139	794	o/ObjectMap
    //   146	154	794	o/ObjectMap
    //   161	182	794	o/ObjectMap
    //   190	208	794	o/ObjectMap
    //   213	220	794	o/ObjectMap
    //   226	241	794	o/ObjectMap
    //   251	266	794	o/ObjectMap
    //   266	275	794	o/ObjectMap
    //   280	289	794	o/ObjectMap
    //   294	310	794	o/ObjectMap
    //   318	336	794	o/ObjectMap
    //   344	351	794	o/ObjectMap
    //   355	362	794	o/ObjectMap
    //   376	382	794	o/ObjectMap
    //   36	64	799	o/LigneInexistanteException
    //   91	109	799	o/LigneInexistanteException
    //   116	124	799	o/LigneInexistanteException
    //   131	139	799	o/LigneInexistanteException
    //   146	154	799	o/LigneInexistanteException
    //   161	182	799	o/LigneInexistanteException
    //   190	208	799	o/LigneInexistanteException
    //   213	220	799	o/LigneInexistanteException
    //   226	241	799	o/LigneInexistanteException
    //   251	266	799	o/LigneInexistanteException
    //   266	275	799	o/LigneInexistanteException
    //   280	289	799	o/LigneInexistanteException
    //   294	310	799	o/LigneInexistanteException
    //   318	336	799	o/LigneInexistanteException
    //   344	351	799	o/LigneInexistanteException
    //   355	362	799	o/LigneInexistanteException
    //   376	382	799	o/LigneInexistanteException
    //   407	413	804	o/Converters
    //   407	413	809	o/ObjectMap
    //   407	413	814	o/LigneInexistanteException
    //   465	474	819	o/Converters
    //   492	505	819	o/Converters
    //   512	519	819	o/Converters
    //   527	540	819	o/Converters
    //   547	554	819	o/Converters
    //   554	563	819	o/Converters
    //   571	583	819	o/Converters
    //   590	596	819	o/Converters
    //   603	609	819	o/Converters
    //   617	629	819	o/Converters
    //   637	649	819	o/Converters
    //   649	658	819	o/Converters
    //   663	672	819	o/Converters
    //   677	691	819	o/Converters
    //   691	704	819	o/Converters
    //   714	723	819	o/Converters
    //   465	474	824	o/ObjectMap
    //   474	477	824	o/ObjectMap
    //   492	505	824	o/ObjectMap
    //   512	519	824	o/ObjectMap
    //   527	540	824	o/ObjectMap
    //   547	554	824	o/ObjectMap
    //   554	563	824	o/ObjectMap
    //   571	583	824	o/ObjectMap
    //   590	596	824	o/ObjectMap
    //   603	609	824	o/ObjectMap
    //   617	629	824	o/ObjectMap
    //   637	649	824	o/ObjectMap
    //   649	658	824	o/ObjectMap
    //   663	672	824	o/ObjectMap
    //   677	691	824	o/ObjectMap
    //   691	704	824	o/ObjectMap
    //   714	723	824	o/ObjectMap
    //   723	726	824	o/ObjectMap
    //   465	474	829	o/LigneInexistanteException
    //   492	505	829	o/LigneInexistanteException
    //   512	519	829	o/LigneInexistanteException
    //   527	540	829	o/LigneInexistanteException
    //   547	554	829	o/LigneInexistanteException
    //   554	563	829	o/LigneInexistanteException
    //   571	583	829	o/LigneInexistanteException
    //   590	596	829	o/LigneInexistanteException
    //   603	609	829	o/LigneInexistanteException
    //   617	629	829	o/LigneInexistanteException
    //   637	649	829	o/LigneInexistanteException
    //   649	658	829	o/LigneInexistanteException
    //   663	672	829	o/LigneInexistanteException
    //   677	691	829	o/LigneInexistanteException
    //   691	704	829	o/LigneInexistanteException
    //   714	723	829	o/LigneInexistanteException
  }
}
