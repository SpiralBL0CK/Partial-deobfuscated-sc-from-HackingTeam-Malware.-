package o;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public final class Data
{
  private static final byte[] buf = { 60, -27, -85, 118, -5, -15, 35, -21, 0, -2, 19, -32, -34, 30, -18, -4, -1, -6, -6, 6, -5, -15 };
  Cipher cipher;
  private final SecretKeySpec key;
  Cipher mac;
  private final byte[] name;
  private final IvParameterSpec size;
  
  public Data() {}
  
  public Data(byte[] paramArrayOfByte)
  {
    name = new byte[paramArrayOfByte.length];
    System.arraycopy(paramArrayOfByte, 0, name, 0, paramArrayOfByte.length);
    key = new SecretKeySpec(name, getType(buf[8], -buf[16], buf[8]));
    paramArrayOfByte = new byte[16];
    int i = 0;
    while (i < 16)
    {
      paramArrayOfByte[i] = 0;
      i += 1;
    }
    size = new IvParameterSpec(paramArrayOfByte);
    i = buf[8];
    mac = Cipher.getInstance(getType(i, i, -buf[16]));
    mac.init(1, key, size);
    i = buf[8];
    cipher = Cipher.getInstance(getType(i, i, -buf[16]));
    cipher.init(2, key, size);
  }
  
  public static String getName(String paramString1, String paramString2)
  {
    if (paramString1 == null) {
      return null;
    }
    if (paramString1.length() == 0) {
      return "";
    }
    String str = paramString1;
    if (paramString1.endsWith(paramString2)) {
      str = paramString1.substring(0, paramString1.length() - paramString2.length());
    }
    return str;
  }
  
  public static String getString(List paramList, String paramString)
  {
    String str = "";
    int i = 0;
    Iterator localIterator = paramList.iterator();
    paramList = str;
    for (;;)
    {
      int j = i;
      if (!localIterator.hasNext()) {
        break;
      }
      str = (String)localIterator.next();
      int k = j + 1;
      i = k;
      if (j > 0)
      {
        paramList = paramList + str + paramString;
        i = k;
      }
    }
    return paramList;
  }
  
  private static String getType(int paramInt1, int paramInt2, int paramInt3)
  {
    byte[] arrayOfByte1 = buf;
    int j = 0;
    int k = 0;
    int i = 65 - paramInt1 * 3;
    paramInt1 = 19 - (paramInt3 << 4);
    int m = 17 - paramInt2 * 14;
    byte[] arrayOfByte2 = new byte[m];
    paramInt3 = j;
    paramInt2 = i;
    j = paramInt1;
    if (arrayOfByte1 == null)
    {
      paramInt3 = paramInt1;
      paramInt2 = paramInt1;
      paramInt1 = k;
    }
    for (;;)
    {
      paramInt3 = paramInt3 - i - 1;
      j = paramInt2;
      paramInt2 = paramInt3;
      paramInt3 = paramInt1;
      arrayOfByte2[paramInt3] = ((byte)paramInt2);
      j += 1;
      paramInt1 = paramInt3 + 1;
      if (paramInt3 == m - 1) {
        return new String(arrayOfByte2, 0);
      }
      i = arrayOfByte1[j];
      paramInt3 = paramInt2;
      paramInt2 = j;
    }
  }
  
  public static ArrayList getValue(String paramString)
  {
    ArrayList localArrayList = new ArrayList();
    paramString = new File(paramString);
    try
    {
      paramString = new BufferedReader(new FileReader(paramString));
      for (;;)
      {
        String str = paramString.readLine();
        if (str == null) {
          break;
        }
        localArrayList.add(str);
      }
      return localArrayList;
    }
    catch (FileNotFoundException paramString)
    {
      return localArrayList;
    }
    catch (IOException paramString) {}
    return localArrayList;
  }
  
  public static String trim(String paramString)
  {
    if (paramString == null) {
      return null;
    }
    StringBuffer localStringBuffer = new StringBuffer();
    int j = paramString.length();
    int i = 0;
    while (i < j)
    {
      char c = paramString.charAt(i);
      if (c != ' ') {
        localStringBuffer.append(c);
      }
      i += 1;
    }
    return localStringBuffer.toString();
  }
}
