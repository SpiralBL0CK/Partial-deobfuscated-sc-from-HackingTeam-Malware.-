package o;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import org.json.JSONObject;

public final class JSONParser
  extends Property
{
  private Calendar a;
  private Calendar c;
  private Date date;
  private boolean pos = false;
  private boolean s = false;
  private Date value;
  
  public JSONParser() {}
  
  private boolean parse(boolean paramBoolean)
  {
    Calendar localCalendar = GregorianCalendar.getInstance(TimeZone.getTimeZone("UTC"));
    if (localCalendar.before(a))
    {
      if (paramBoolean)
      {
        count = (a.getTimeInMillis() - localCalendar.getTimeInMillis());
        set();
      }
      else
      {
        value = (a.getTimeInMillis() - localCalendar.getTimeInMillis());
        set();
      }
      return true;
    }
    if (localCalendar.before(c))
    {
      if (paramBoolean)
      {
        count = (c.getTimeInMillis() - localCalendar.getTimeInMillis());
        set();
      }
      else
      {
        value = (c.getTimeInMillis() - localCalendar.getTimeInMillis());
        set();
      }
      return false;
    }
    parse();
    value = Long.MAX_VALUE;
    set();
    count = Long.MAX_VALUE;
    set();
    return false;
  }
  
  public final void doInBackground()
  {
    a = GregorianCalendar.getInstance(TimeZone.getTimeZone("UTC"));
    a.setTime(value);
    c = GregorianCalendar.getInstance(TimeZone.getTimeZone("UTC"));
    c.setTime(date);
    Calendar localCalendar = GregorianCalendar.getInstance(TimeZone.getTimeZone("UTC"));
    if (localCalendar.before(a))
    {
      s = parse(true);
      return;
    }
    if (localCalendar.before(c)) {
      s = parse(true);
    }
  }
  
  public final void execute()
  {
    if (pos) {
      parse();
    }
  }
  
  protected final boolean execute(Track paramTrack)
  {
    pos = false;
    paramTrack = this$0;
    try
    {
      paramTrack = paramTrack.parse("datefrom");
      value = paramTrack;
      paramTrack = this$0.this$0;
      boolean bool = paramTrack.has("dateto");
      if (bool)
      {
        paramTrack = this$0;
        paramTrack = paramTrack.parse("dateto");
        date = paramTrack;
      }
      else
      {
        paramTrack = new Date(Long.MAX_VALUE);
        date = paramTrack;
      }
    }
    catch (JSONException paramTrack)
    {
      for (;;) {}
    }
    return false;
    return true;
  }
  
  public final void read()
  {
    if (s)
    {
      init();
      pos = true;
    }
    else
    {
      parse();
      pos = false;
    }
    s = parse(false);
  }
}
